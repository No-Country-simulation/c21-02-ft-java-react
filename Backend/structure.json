{
  "src": {
    "main": {
      "java": {
        "com": {
          "Casinop2p": {
            "Casinop2pApplication.java": "package com.Casinop2p;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.scheduling.annotation.EnableScheduling;\r\n\r\n@SpringBootApplication\r\n@EnableScheduling\r\npublic class Casinop2pApplication {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tSpringApplication.run(Casinop2pApplication.class, args);\r\n\t}\r\n\r\n}\r\n",
            "config": {
              "AppConfig.java": "package com.Casinop2p.config;\r\n\r\nimport org.modelmapper.ModelMapper;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\n\r\n@Configuration\r\npublic class AppConfig {\r\n\r\n    @Bean\r\n    public ModelMapper modelMapper() {\r\n        return new ModelMapper();\r\n    }\r\n}\r\n",
              "CloudinaryConfig.java": "package com.Casinop2p.config;\r\n\r\nimport com.cloudinary.Cloudinary;\r\nimport com.cloudinary.utils.ObjectUtils;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.beans.factory.annotation.Value;\r\n\r\n@Configuration\r\npublic class CloudinaryConfig {\r\n\r\n    @Value(\"${cloudinary.cloud_name}\")\r\n    private String cloudName;\r\n\r\n    @Value(\"${cloudinary.api_key}\")\r\n    private String apiKey;\r\n\r\n    @Value(\"${cloudinary.api_secret}\")\r\n    private String apiSecret;\r\n\r\n    @Bean\r\n    public Cloudinary cloudinary() {\r\n        return new Cloudinary(ObjectUtils.asMap(\r\n                \"cloud_name\", cloudName,\r\n                \"api_key\", apiKey,\r\n                \"api_secret\", apiSecret\r\n        ));\r\n    }\r\n}\r\n",
              "SecurityConfig.java": "package com.Casinop2p.config;\r\n\r\n\r\nimport com.Casinop2p.util.JwtAuthenticationFilter;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.http.HttpMethod;\r\nimport org.springframework.security.authentication.AuthenticationManager;\r\nimport org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;\r\nimport org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;\r\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\r\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\r\nimport org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;\r\nimport org.springframework.security.config.http.SessionCreationPolicy;\r\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\r\nimport org.springframework.security.crypto.password.PasswordEncoder;\r\nimport org.springframework.security.web.SecurityFilterChain;\r\nimport org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;\r\nimport org.springframework.web.cors.CorsConfiguration;\r\nimport org.springframework.web.cors.UrlBasedCorsConfigurationSource;\r\nimport org.springframework.web.filter.CorsFilter;\r\n\r\nimport java.util.List;\r\n\r\n@Configuration\r\n@EnableWebSecurity\r\n@RequiredArgsConstructor\r\n@EnableMethodSecurity\r\npublic class SecurityConfig {\r\n\r\n    private final JwtAuthenticationFilter jwtAuthenticationFilter;\r\n    //private final CustomUserDetailsService userDetailsService;\r\n\r\n\r\n\r\n    @Bean\r\n    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\r\n        return http\r\n                .csrf(AbstractHttpConfigurer::disable)\r\n                .cors(cors -> cors.configurationSource(request -> {\r\n                    CorsConfiguration corsConfig = new CorsConfiguration();\r\n                    corsConfig.setAllowedOrigins(List.of(\"http://localhost:3000\", \"https://c21-02-ft-java-react-frontend-qw2s.onrender.com\"));\r\n                    corsConfig.setAllowedMethods(List.of(\"GET\", \"POST\", \"PUT\", \"DELETE\", \"OPTIONS\"));\r\n                    corsConfig.setAllowedHeaders(List.of(\"Authorization\", \"Content-Type\"));\r\n                    corsConfig.setAllowCredentials(true);\r\n                    return corsConfig;\r\n                }))\r\n                .sessionManagement(sessionManagement ->\r\n                        sessionManagement.sessionCreationPolicy(SessionCreationPolicy.STATELESS))\r\n                .authorizeHttpRequests(authorizeRequests ->\r\n                        authorizeRequests\r\n                                .requestMatchers(HttpMethod.POST,\"/api/auth/login\",\r\n                                        \"/api/users\").permitAll()\r\n                                .anyRequest().authenticated())\r\n                .addFilterBefore(jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class)\r\n\r\n        .build();\r\n    }\r\n\r\n    @Bean\r\n    public AuthenticationManager authenticationManager(AuthenticationConfiguration authConfig) throws Exception {\r\n        return authConfig.getAuthenticationManager();\r\n    }\r\n\r\n    @Bean\r\n    public PasswordEncoder passwordEncoder(){\r\n        return new BCryptPasswordEncoder();\r\n    }\r\n\r\n    @Bean\r\n    public CorsFilter corsFilter() {\r\n        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\r\n        CorsConfiguration corsConfig = new CorsConfiguration();\r\n        corsConfig.setAllowedOrigins(List.of(\"https://c21-02-ft-java-react-frontend-qw2s.onrender.com\", \"http://localhost:3000\")); // Origen permitido\r\n        corsConfig.setAllowedMethods(List.of(\"GET\", \"POST\", \"PUT\", \"DELETE\",\"OPTIONS\")); // MÃ©todos permitidos\r\n        corsConfig.setAllowedHeaders(List.of(\"Authorization\", \"Content-Type\",\"Access-Control-Allow-Origin\", \"Access-Control-Allow-Credentials\")); // Cabeceras permitidas\r\n        corsConfig.setAllowCredentials(true); // Permitir credenciales (si es necesario)\r\n        source.registerCorsConfiguration(\"/**\", corsConfig);\r\n        return new CorsFilter(source);\r\n    }\r\n}\r\n\r\n"
            },
            "controller": {
              "AuthController.java": "package com.Casinop2p.controller;\r\n\r\nimport com.Casinop2p.dto.LoginDTO;\r\nimport com.Casinop2p.dto.LoginDTORes;\r\nimport com.Casinop2p.entity.UserEntity;\r\nimport com.Casinop2p.repository.UserRepository;\r\nimport com.Casinop2p.service.JwtUtil;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.security.authentication.AuthenticationManager;\r\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\r\nimport org.springframework.security.core.Authentication;\r\nimport org.springframework.security.core.context.SecurityContextHolder;\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\n@RestController\r\n@RequestMapping(\"/api/auth\")\r\n@CrossOrigin(\"*\")\r\npublic class AuthController {\r\n\r\n    @Autowired\r\n    private UserRepository userRepository;\r\n    @Autowired\r\n    private AuthenticationManager authenticationManager;\r\n    @Autowired\r\n    private JwtUtil jwtUtil;\r\n\r\n    @PostMapping(\"/login\")\r\n    public ResponseEntity<LoginDTORes> login(@RequestBody LoginDTO loginDTO) {\r\n        System.out.println(loginDTO);\r\n        Authentication authentication = new UsernamePasswordAuthenticationToken(loginDTO.email(), loginDTO.password());\r\n        authenticationManager.authenticate(authentication);\r\n        SecurityContextHolder.getContext().setAuthentication(authentication);\r\n        UserEntity user = userRepository.findByEmail(loginDTO.email()).orElseThrow();\r\n        String jwt = jwtUtil.generateToken(loginDTO.email());\r\n\r\n        return ResponseEntity.ok(LoginDTORes.builder().jwt(jwt).email(loginDTO.email()).role(user.getUserEnum().name()).build());\r\n    }\r\n\r\n}\r\n\r\n\r\n",
              "GlobalExceptionController.java": "package com.Casinop2p.controller;\r\n\r\nimport com.Casinop2p.dto.ErrorDtoRes;\r\nimport com.Casinop2p.exceptions.DuplicatedException;\r\nimport com.Casinop2p.exceptions.NotFoundException;\r\nimport jakarta.servlet.http.HttpServletRequest;\r\nimport java.time.LocalDateTime;\r\nimport java.time.ZoneId;\r\nimport java.util.List;\r\nimport org.springframework.http.HttpStatus;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.http.converter.HttpMessageNotReadableException;\r\nimport org.springframework.security.authentication.BadCredentialsException;\r\nimport org.springframework.validation.FieldError;\r\nimport org.springframework.validation.ObjectError;\r\nimport org.springframework.web.HttpMediaTypeNotSupportedException;\r\nimport org.springframework.web.HttpRequestMethodNotSupportedException;\r\nimport org.springframework.web.bind.MethodArgumentNotValidException;\r\nimport org.springframework.web.bind.annotation.ExceptionHandler;\r\nimport org.springframework.web.bind.annotation.RestControllerAdvice;\r\nimport org.springframework.web.method.annotation.MethodArgumentTypeMismatchException;\r\n\r\n@RestControllerAdvice\r\npublic class GlobalExceptionController {\r\n\r\n  ZoneId zoneId = ZoneId.of(\"America/Buenos_Aires\");\r\n  LocalDateTime timestamp = LocalDateTime.now(zoneId);\r\n\r\n  @ExceptionHandler(NotFoundException.class)\r\n  public ResponseEntity<ErrorDtoRes> handleNotFoundException(NotFoundException exception,\r\n      HttpServletRequest request) {\r\n\r\n    int httpStatus = HttpStatus.NOT_FOUND.value();\r\n    ErrorDtoRes response = new ErrorDtoRes(\r\n        httpStatus,\r\n        request.getMethod(),\r\n        \"Elemento no econtrado\",\r\n        exception.getMessage(),\r\n        timestamp,\r\n        null\r\n    );\r\n\r\n    return ResponseEntity.status(httpStatus).body(response);\r\n  }\r\n\r\n  @ExceptionHandler(DuplicatedException.class)\r\n  public ResponseEntity<ErrorDtoRes> handleDuplicatedException(DuplicatedException exception,\r\n      HttpServletRequest request) {\r\n\r\n    int httpStatus = HttpStatus.CONFLICT.value();\r\n    ErrorDtoRes response = new ErrorDtoRes(\r\n        httpStatus,\r\n        request.getMethod(),\r\n        \"Elemento duplicado\",\r\n        exception.getMessage(),\r\n        timestamp,\r\n        null\r\n    );\r\n\r\n    return ResponseEntity.status(httpStatus).body(response);\r\n  }\r\n\r\n  @ExceptionHandler(IllegalArgumentException.class)\r\n  public ResponseEntity<ErrorDtoRes> handleIllegalArgumentException(\r\n      IllegalArgumentException exception, HttpServletRequest request) {\r\n\r\n    int httpStatus = HttpStatus.BAD_REQUEST.value();\r\n    ErrorDtoRes apiErrorResponse = new ErrorDtoRes(\r\n        httpStatus,\r\n        request.getMethod(),\r\n        \"Elemento con Argumentos invalidos\",\r\n        exception.getMessage(),\r\n        timestamp,\r\n        null\r\n    );\r\n\r\n    return ResponseEntity.status(httpStatus).body(apiErrorResponse);\r\n  }\r\n\r\n  @ExceptionHandler(HttpMessageNotReadableException.class)\r\n  public ResponseEntity<ErrorDtoRes> handleHttpMessageNotReadableException(\r\n      HttpMessageNotReadableException exception, HttpServletRequest request) {\r\n\r\n    int httpStatus = HttpStatus.BAD_REQUEST.value();\r\n    ErrorDtoRes apiErrorResponse = new ErrorDtoRes(\r\n        httpStatus,\r\n        request.getMethod(),\r\n        \"Error en la lectura del HTTP body, Compruebe que el formato es correcto y/o contenga \"\r\n            + \"data valida.\",\r\n        exception.getMessage(),\r\n        timestamp,\r\n        null\r\n    );\r\n\r\n    return ResponseEntity.status(httpStatus).body(apiErrorResponse);\r\n  }\r\n\r\n  @ExceptionHandler(HttpMediaTypeNotSupportedException.class)\r\n  public ResponseEntity<ErrorDtoRes> handleHttpMediaTypeNotSupportedException(\r\n      HttpMediaTypeNotSupportedException exception,\r\n      HttpServletRequest request) {\r\n\r\n    int httpStatus = HttpStatus.UNSUPPORTED_MEDIA_TYPE.value();\r\n    ErrorDtoRes apiErrorResponse = new ErrorDtoRes(\r\n        httpStatus,\r\n        request.getMethod(),\r\n        \"Media Type no soportados, los Media Type soportados son: \"\r\n            + exception.getSupportedMediaTypes()\r\n            + \" y tu enviaste: \" + exception.getContentType(),\r\n        exception.getMessage(),\r\n        timestamp,\r\n        null\r\n    );\r\n\r\n    return ResponseEntity.status(httpStatus).body(apiErrorResponse);\r\n  }\r\n\r\n  @ExceptionHandler(HttpRequestMethodNotSupportedException.class)\r\n  public ResponseEntity<ErrorDtoRes> handleHttpRequestMethodNotSupportedException(\r\n      HttpRequestMethodNotSupportedException exception,\r\n      HttpServletRequest request) {\r\n\r\n    int httpStatus = HttpStatus.METHOD_NOT_ALLOWED.value();\r\n    ErrorDtoRes apiErrorResponse = new ErrorDtoRes(\r\n        httpStatus,\r\n        request.getMethod(),\r\n        \"metodo HTTP no permitado, Revisa el metodo HTTP de la request.\",\r\n        exception.getMessage(),\r\n        timestamp,\r\n        null\r\n    );\r\n\r\n    return ResponseEntity.status(httpStatus).body(apiErrorResponse);\r\n  }\r\n\r\n  @ExceptionHandler(MethodArgumentNotValidException.class)\r\n  public ResponseEntity<ErrorDtoRes> handleMethodArgumentNotValidException(\r\n      MethodArgumentNotValidException exception, HttpServletRequest request) {\r\n\r\n    int httpStatus = HttpStatus.BAD_REQUEST.value();\r\n    List<ObjectError> errors = exception.getAllErrors();\r\n    List<String> details = errors.stream().map(error -> {\r\n      if (error instanceof FieldError fieldError) {\r\n        return fieldError.getField() + \": \" + fieldError.getDefaultMessage();\r\n      }\r\n\r\n      return error.getDefaultMessage();\r\n    }).toList();\r\n\r\n    ErrorDtoRes apiErrorResponse = new ErrorDtoRes(\r\n        httpStatus,\r\n        request.getMethod(),\r\n        \"La request tiene parametros invalidos o incompletos.\",\r\n        exception.getMessage(),\r\n        timestamp,\r\n        details\r\n    );\r\n\r\n    return ResponseEntity.status(httpStatus).body(apiErrorResponse);\r\n  }\r\n\r\n  @ExceptionHandler(MethodArgumentTypeMismatchException.class)\r\n  public ResponseEntity<ErrorDtoRes> handleMethodArgumentTypeMismatchException(\r\n      MethodArgumentTypeMismatchException exception,\r\n      HttpServletRequest request) {\r\n\r\n    int httpStatus = HttpStatus.BAD_REQUEST.value();\r\n    Object valueRejected = exception.getValue();\r\n    String propertyName = exception.getName();\r\n\r\n    ErrorDtoRes apiErrorResponse = new ErrorDtoRes(\r\n        httpStatus,\r\n        request.getMethod(),\r\n        \"Request Invalido: el valor proporcionado \" + valueRejected\r\n            + \" no tiene el type esperado \" + \"para el \" + propertyName,\r\n        exception.getMessage(),\r\n        timestamp,\r\n        null\r\n    );\r\n\r\n    return ResponseEntity.status(httpStatus).body(apiErrorResponse);\r\n  }\r\n\r\n  @ExceptionHandler(BadCredentialsException.class)\r\n  public ResponseEntity<ErrorDtoRes> handleBadCredentialsException(\r\n      BadCredentialsException exception,\r\n      HttpServletRequest request) {\r\n\r\n    int httpStatus = HttpStatus.UNAUTHORIZED.value();\r\n    ErrorDtoRes apiErrorResponse = new ErrorDtoRes(\r\n        httpStatus,\r\n        request.getMethod(),\r\n        \"Credenciales invalidas\",\r\n        exception.getMessage(),\r\n        timestamp,\r\n        null\r\n    );\r\n\r\n    return ResponseEntity.status(httpStatus).body(apiErrorResponse);\r\n  }\r\n\r\n\r\n\r\n\r\n}\r\n",
              "RoomController.java": "package com.Casinop2p.controller;\r\n\r\nimport com.Casinop2p.Mapper.EntityMapper;\r\nimport com.Casinop2p.dto.BetDTO;\r\nimport com.Casinop2p.dto.RoomResponseDTO;\r\nimport com.Casinop2p.entity.BetEntity;\r\nimport com.Casinop2p.entity.RoomEntity;\r\nimport com.Casinop2p.entity.SportEventEntity;\r\nimport com.Casinop2p.entity.UserEntity;\r\nimport com.Casinop2p.repository.RoomRepository;\r\nimport com.Casinop2p.repository.SportEventRepository;\r\nimport com.Casinop2p.service.RoomService;\r\nimport com.Casinop2p.service.SportEventService;\r\nimport com.Casinop2p.util.BetEnum;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.springframework.http.HttpStatus;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.security.access.prepost.PreAuthorize;\r\nimport org.springframework.security.core.annotation.AuthenticationPrincipal;\r\nimport org.springframework.security.core.userdetails.UserDetails;\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\nimport java.net.http.HttpResponse;\r\nimport java.util.List;\r\n\r\n@RestController\r\n@CrossOrigin(\"*\")\r\n@RequestMapping(\"/api/rooms\")\r\n@RequiredArgsConstructor\r\npublic class RoomController {\r\n\r\n    private final RoomService roomService;\r\n    private final SportEventRepository sportEventRepository;\r\n    private final RoomRepository roomRepository;\r\n\r\n    @PostMapping\r\n    public ResponseEntity<RoomResponseDTO> createRoom(@AuthenticationPrincipal UserDetails userDetails, @RequestBody RoomEntity room, @RequestParam Long eventId) {\r\n        UserEntity user = (UserEntity) userDetails;\r\n        SportEventEntity sportEventEntity = sportEventRepository.findById(eventId)\r\n                .orElseThrow(() -> new RuntimeException(\"Evento no encontrado\"));\r\n        if(user.getBalance() < room.getBet()) {\r\n            throw new RuntimeException(\"You don't have enough balance\");\r\n        }\r\n        room.setRoomOwner(user);\r\n        room.setSportEvent(sportEventEntity);\r\n        // Agregamos al creador a la lista de usuarios de la sala\r\n        room.getUsersInRoom().add(user);\r\n\r\n\r\n\r\n        RoomEntity createdRoom = roomService.createRoom(room);\r\n        // AquÃ­ convertimos la entidad a un DTO antes de devolverla\r\n        RoomResponseDTO response = EntityMapper.toRoomResponseDTO(createdRoom);\r\n        return ResponseEntity.status(HttpStatus.CREATED).body(response);\r\n    }\r\n\r\n\r\n\r\n    @GetMapping(\"/{id}\")\r\n    public ResponseEntity<RoomEntity> getRoomById(@PathVariable Long id) {\r\n        RoomEntity room = roomService.getRoomById(id);\r\n        return ResponseEntity.ok(room);\r\n    }\r\n\r\n    @GetMapping\r\n    public ResponseEntity<List<RoomEntity>> getAllRooms() {\r\n        List<RoomEntity> rooms = roomService.getAllRooms();\r\n        return ResponseEntity.ok(rooms);\r\n    }\r\n\r\n    @PutMapping(\"/{id}\")\r\n    public ResponseEntity<RoomEntity> updateRoom(@PathVariable Long id, @RequestBody RoomEntity room) {\r\n        RoomEntity updatedRoom = roomService.updateRoom(id, room);\r\n        return ResponseEntity.ok(updatedRoom);\r\n    }\r\n\r\n    @DeleteMapping(\"/{id}\")\r\n    public ResponseEntity<Void> deleteRoom(@PathVariable Long id) {\r\n        roomService.deleteRoom(id);\r\n        return ResponseEntity.noContent().build();\r\n    }\r\n\r\n    // endpoint para invitar a un usuario a una sala privada\r\n    @PostMapping(\"/{roomId}/invite/{username}\")\r\n    public ResponseEntity<RoomEntity> inviteUserToRoom(@PathVariable Long roomId, @PathVariable String username) {\r\n        RoomEntity updatedRoom = roomService.inviteUserToRoom(roomId, username);\r\n        return ResponseEntity.ok(updatedRoom);\r\n    }\r\n\r\n    // Endpoint para hacer una apuesta\r\n    @PostMapping(\"/{roomId}/bet\")\r\n    public ResponseEntity<BetEntity> placeBet(\r\n            @PathVariable Long roomId,\r\n            @RequestBody BetDTO betDTO) {  // @RequestBody para recibir un DTO con los detalles de la apuesta\r\n\r\n        // Realizamos la apuesta usando los datos del DTO\r\n        BetEntity bet = roomService.placeBet(roomId, betDTO.getUserId(), betDTO.getBetEnum(), betDTO.getAmount());\r\n\r\n        return ResponseEntity.ok(bet);\r\n    }\r\n\r\n    // Endpoint para cerrar la sala y calcular resultados\r\n    @PostMapping(\"/{roomId}/close\")\r\n    public ResponseEntity<Void> closeRoom(\r\n            @PathVariable Long roomId,\r\n            @RequestParam BetEnum result) {  // Recibimos el resultado de la apuesta como RequestParam\r\n\r\n        // Cerramos la sala y calculamos el resultado\r\n        roomService.closeRoom(roomId, result);\r\n\r\n        return ResponseEntity.noContent().build();\r\n    }\r\n\r\n    @PostMapping(\"/{roomId}/join\")\r\n    public ResponseEntity<RoomResponseDTO> joinRoom(@PathVariable Long roomId, @AuthenticationPrincipal UserDetails userDetails) {\r\n        UserEntity user = (UserEntity) userDetails;\r\n\r\n\r\n        if(user.getBalance() < roomRepository.getReferenceById(roomId).getBet()){\r\n            throw new RuntimeException(\"you dont have enough balance\");\r\n        }\r\n        // Llamamos al servicio para agregar el usuario a la sala\r\n        RoomEntity updatedRoom = roomService.addUserToRoom(roomId, user);\r\n\r\n\r\n\r\n\r\n        // Convertimos la entidad de la sala actualizada a DTO para devolverla en la respuesta\r\n        RoomResponseDTO response = EntityMapper.toRoomResponseDTO(updatedRoom);\r\n        return ResponseEntity.ok(response);\r\n    }\r\n\r\n}\r\n\r\n",
              "UserController.java": "package com.Casinop2p.controller;\r\n\r\nimport com.Casinop2p.dto.UserDTOReq;\r\nimport com.Casinop2p.dto.UserDTORes;\r\nimport com.Casinop2p.entity.UserEntity;\r\nimport com.Casinop2p.service.CloudinaryService;\r\nimport com.Casinop2p.service.UserService;\r\nimport jakarta.validation.Valid;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.http.HttpStatus;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.security.core.annotation.AuthenticationPrincipal;\r\nimport org.springframework.web.bind.annotation.*;\r\nimport org.springframework.web.multipart.MultipartFile;\r\n\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\n\r\n\r\n@RequiredArgsConstructor\r\n@CrossOrigin(\"*\")\r\n@RestController\r\n@RequestMapping(\"/api/users\")\r\npublic class UserController {\r\n\r\n    @Autowired\r\n    private UserService userService;\r\n\r\n    @Autowired\r\n    private CloudinaryService cloudinaryService;\r\n\r\n    // Crear un nuevo usuario\r\n    @PostMapping\r\n    public ResponseEntity<UserDTORes> createUser(@Valid @RequestBody UserDTOReq userDTOReq) {\r\n        System.out.println(userDTOReq);\r\n        UserDTORes createdUser = userService.createUser(userDTOReq);\r\n        return ResponseEntity.status(HttpStatus.CREATED).body(createdUser);\r\n    }\r\n\r\n    // Obtener un usuario por ID\r\n    @GetMapping(\"/{id}\")\r\n    public ResponseEntity<UserDTORes> getUserById(@PathVariable Long id) {\r\n        UserDTORes user = userService.getUserById(id);\r\n        return ResponseEntity.ok(user);\r\n    }\r\n\r\n    // Actualizar un usuario por ID\r\n    @PutMapping(\"/{id}\")\r\n    public ResponseEntity<UserDTORes> updateUser(@PathVariable Long id, @Valid @RequestBody UserDTOReq userDTOReq) {\r\n        UserDTORes updatedUser = userService.updateUser(id, userDTOReq);\r\n        return ResponseEntity.ok(updatedUser);\r\n    }\r\n\r\n    // Eliminar un usuario por ID\r\n    @DeleteMapping(\"/{id}\")\r\n    public ResponseEntity<Void> deleteUser(@PathVariable Long id) {\r\n        userService.deleteUser(id);\r\n        return ResponseEntity.noContent().build();\r\n    }\r\n\r\n    // Obtener todos los usuarios\r\n    @GetMapping\r\n    public ResponseEntity<List<UserDTORes>> getAllUsers() {\r\n        List<UserDTORes> users = userService.getAllUsers();\r\n        return ResponseEntity.ok(users);\r\n    }\r\n\r\n    @PostMapping(\"/{id}/upload-image\")\r\n    public ResponseEntity<UserDTORes> uploadProfileImage(\r\n            @PathVariable Long id,\r\n            @RequestParam(\"file\") MultipartFile file) throws IOException {\r\n        String imageUrl = cloudinaryService.uploadImage(file);\r\n        UserDTORes updatedUser = userService.updateProfileImage(id, imageUrl);\r\n        return ResponseEntity.ok(updatedUser);\r\n    }\r\n\r\n    @PostMapping(\"/upload-image-url\")\r\n    public ResponseEntity<UserDTORes> uploadProfileImageByUrl(\r\n            @AuthenticationPrincipal UserEntity loggedInUser,\r\n            @RequestBody String imageUrl) throws IOException {\r\n        String uploadedUrl = cloudinaryService.uploadImageByUrl(imageUrl);\r\n        UserDTORes updatedUser = userService.updateProfileImage(loggedInUser.getId(), uploadedUrl);\r\n        return ResponseEntity.ok(updatedUser);\r\n    }\r\n}\r\n\r\n"
            },
            "dto": {
              "BetDTO.java": "package com.Casinop2p.dto;\r\n\r\nimport com.Casinop2p.util.BetEnum;\r\nimport lombok.AllArgsConstructor;\r\nimport lombok.Data;\r\nimport lombok.NoArgsConstructor;\r\n\r\n@Data\r\n@AllArgsConstructor\r\n@NoArgsConstructor\r\npublic class BetDTO {\r\n    private Long userId;        // ID del usuario que realiza la apuesta\r\n    private BetEnum betEnum;    // Tipo de apuesta (WIN, LOSS, DRAW)\r\n    private float amount;       // Cantidad apostada\r\n}\r\n\r\n",
              "ErrorDtoRes.java": "package com.Casinop2p.dto;\r\n\r\nimport com.fasterxml.jackson.annotation.JsonFormat;\r\nimport com.fasterxml.jackson.annotation.JsonProperty;\r\nimport java.time.LocalDateTime;\r\nimport java.util.List;\r\n\r\npublic record ErrorDtoRes(\r\n    @JsonProperty(\"status_code\")\r\n    Integer statusCode,\r\n    @JsonProperty(\"http_method\")\r\n    String httpMethod,\r\n    String message,\r\n    @JsonProperty(\"server_message\")\r\n    String backendMessage,\r\n    @JsonFormat(pattern = \"yyyy-MM-dd HH:mm\")\r\n    LocalDateTime timestamp,\r\n    List<String> details\r\n) {\r\n\r\n}\r\n",
              "LoginDTO.java": "package com.Casinop2p.dto;\r\n\r\nimport jakarta.validation.constraints.Email;\r\nimport jakarta.validation.constraints.Pattern;\r\n\r\npublic record LoginDTO(\r\n        @Pattern(regexp = \"^(?=.[0-9])(?=.[a-z])(?=.[A-Z])(?=.[@#$%^&+=])(?=\\\\S+$).{8,}$\",\r\n                message = \"La contraseÃ±a debe contener al menos un dÃ­gito, una letra minÃºscula, una letra mayÃºscula y un carÃ¡cter especial.\")\r\n        String password,@Email\r\nString email\r\n) {\r\n}\r\n",
              "LoginDTORes.java": "package com.Casinop2p.dto;\r\n\r\nimport lombok.*;\r\n\r\n\r\n\r\n@Setter\r\n@Getter\r\n@AllArgsConstructor\r\n@NoArgsConstructor\r\n@Builder\r\npublic class LoginDTORes {\r\n    private String jwt;\r\n    private String role;\r\n    private String email;\r\n    private Long id;\r\n}\r\n",
              "RoomDTO.java": "package com.Casinop2p.dto;\r\n\r\nimport java.util.Date;\r\n\r\npublic record RoomDTO(Long id,\r\n                      String roomName,\r\n                      boolean enable,\r\n                      float bet,\r\n                      int maxUsers,\r\n                      boolean privateRoom,\r\n                      Date expirationDate,\r\n                      Date creationDate,\r\n                      float totalAmount) {\r\n}\r\n",
              "RoomResponseDTO.java": "package com.Casinop2p.dto;\r\n\r\nimport lombok.AllArgsConstructor;\r\nimport lombok.Getter;\r\nimport lombok.NoArgsConstructor;\r\nimport lombok.Setter;\r\n\r\nimport java.util.Date;\r\n\r\n@Setter\r\n@Getter\r\n@AllArgsConstructor\r\n@NoArgsConstructor\r\npublic class RoomResponseDTO {\r\n\r\n    private Long id;\r\n    private String roomName;\r\n    private String roomOwnerName;  // AquÃ­ solo devolvemos el nombre del propietario\r\n    private boolean enable;\r\n    private float bet;\r\n    private int maxUsers;\r\n    private boolean privateRoom;\r\n    private String betDescription;\r\n    private Date expirationDate;\r\n    private Date creationDate;\r\n    private float totalAmount;\r\n    private Long event;\r\n}\r\n",
              "UserDTO.java": "package com.Casinop2p.dto;\r\n\r\npublic record UserDTO(Long id,\r\n                      String name,\r\n                      String email,\r\n                      float balance,\r\n                      String userEnum) {\r\n}\r\n",
              "UserDTOReq.java": "package com.Casinop2p.dto;\r\n\r\nimport jakarta.validation.constraints.Email;\r\nimport jakarta.validation.constraints.Pattern;\r\nimport jakarta.validation.constraints.Size;\r\nimport lombok.NonNull;\r\n\r\npublic record UserDTOReq(\r\n                         @NonNull\r\n                              @Size(min = 3, max = 20)\r\n                      String name,\r\n                         //@NonNull\r\n                      //@Size(min = 4, message = \"La contraseÃ±a debe tener al menos 8 caracteres\")\r\n                      //@Pattern(regexp = \"^(?=.[0-9])(?=.[a-z])(?=.[A-Z])(?=.[@#$%^&+=])(?=\\\\S+$).{8,}$\",\r\n                              //message = \"La contraseÃ±a debe contener al menos un dÃ­gito, una letra minÃºscula, una letra mayÃºscula y un carÃ¡cter especial.\")\r\n                      String password,\r\n\r\n                         float balance,\r\n                         @NonNull\r\n                              @Email\r\n                      String email,\r\n                         String userEnum) {\r\n\r\n\r\n\r\n}\r\n",
              "UserDTORes.java": "package com.Casinop2p.dto;\r\n\r\nimport jakarta.validation.constraints.Email;\r\nimport jakarta.validation.constraints.Pattern;\r\nimport jakarta.validation.constraints.Size;\r\nimport lombok.NonNull;\r\n\r\npublic record UserDTORes(Long id,\r\n                      String name,\r\n                         float balance,\r\n                      String email,\r\n                         String userEnum) {\r\n\r\n\r\n\r\n}\r\n"
            },
            "entity": {
              "BetEntity.java": "package com.Casinop2p.entity;\r\n\r\nimport com.Casinop2p.util.BetEnum;\r\nimport jakarta.persistence.*;\r\nimport lombok.Data;\r\n\r\nimport java.sql.ConnectionBuilder;\r\nimport java.util.HashSet;\r\nimport java.util.Set;\r\n\r\n@Entity\r\n@Data\r\npublic class BetEntity {\r\n\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)  // Genera el ID de la apuesta automÃ¡ticamente\r\n    private Long id;\r\n\r\n    private String team;  // Equipo por el cual el usuario estÃ¡ apostando\r\n\r\n\r\n    @ManyToOne\r\n    private UserEntity user;  // El usuario que hizo la apuesta\r\n\r\n    @ManyToOne\r\n    private RoomEntity room;  // La sala en la que se hizo la apuesta\r\n\r\n    private float amount;  // La cantidad de dinero apostada por el usuario\r\n\r\n\r\n\r\n}\r\n",
              "RoomEntity.java": "package com.Casinop2p.entity;\r\n\r\nimport com.Casinop2p.util.BetEnum;\r\nimport jakarta.persistence.*;\r\nimport lombok.Data;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Date;\r\nimport java.util.HashSet;\r\nimport java.util.Set;\r\n\r\nimport jakarta.persistence.*;\r\nimport lombok.Data;\r\nimport java.util.Date;\r\nimport java.util.List;\r\n\r\n@Entity\r\n@Data\r\npublic class RoomEntity {\r\n\r\n        @Id\r\n        @GeneratedValue(strategy = GenerationType.IDENTITY)  // ID Ãºnico de la sala\r\n        private Long id;\r\n\r\n        private String roomName;  // Nombre de la sala\r\n\r\n        private boolean enable = true;  // Si la sala estÃ¡ habilitada o no para apuestas\r\n\r\n        @Enumerated(EnumType.STRING)  // Resultado de la apuesta: WIN, LOSS o DRAW\r\n        private BetEnum result;\r\n\r\n        private float bet;  // Monto estÃ¡ndar de la apuesta en la sala (opcional)\r\n\r\n        private int maxUsers;  // MÃ¡ximo nÃºmero de usuarios permitidos en la sala\r\n\r\n        @ManyToOne\r\n        @JoinColumn(name=\"room_owner_id\",nullable = false)\r\n        private UserEntity roomOwner;  // El creador de la sala\r\n\r\n        @ManyToMany\r\n        private List<UserEntity> usersInRoom = new ArrayList<>();  // Usuarios que se han unido a la sala\r\n\r\n        private boolean privateRoom;  // Si la sala es privada o no\r\n\r\n        @ManyToMany\r\n        private List<UserEntity> invitedUsers = new ArrayList<>();  // Usuarios invitados si es sala privada\r\n\r\n        private String betDescription;  // DescripciÃ³n general de la apuesta\r\n\r\n        @Temporal(TemporalType.TIMESTAMP)\r\n        private Date expirationDate;  // Fecha en la que expira la sala\r\n\r\n        @Temporal(TemporalType.TIMESTAMP)\r\n        private Date creationDate;  // Fecha de creaciÃ³n de la sala\r\n\r\n        private float totalAmount;  // Cantidad total acumulada en apuestas dentro de la sala\r\n\r\n        @OneToMany(mappedBy = \"room\", cascade = CascadeType.ALL)\r\n        private List<BetEntity> bets = new ArrayList<>();  // Lista de todas las apuestas realizadas en la sala\r\n\r\n        @ManyToOne\r\n        @JoinColumn(name = \"sport_event_id\", nullable = false)\r\n        private SportEventEntity sportEvent;  // RelaciÃ³n con el evento deportivo\r\n\r\n        @PrePersist\r\n        protected void onCreate() {\r\n            creationDate = new Date();  // Fecha de creaciÃ³n se asigna automÃ¡ticamente\r\n            //expirationDate = Date.from(creationDate.toInstant().plusSeconds(3600));  // Sala expira en una hora\r\n                if (sportEvent != null) {\r\n                        expirationDate = sportEvent.getEventDate();  // ExpiraciÃ³n segÃºn la fecha del evento\r\n                }\r\n        }\r\n\r\n        // TRAER EL SPORTEVENT A LA ENTIDAD ROOM\r\n\r\n        // MÃ©todo para calcular el total de dinero apostado en la sala\r\n        public void calculateTotalAmount() {\r\n            totalAmount = bets.stream().map(BetEntity::getAmount).reduce(0f, Float::sum);\r\n        }\r\n}\r\n\r\n\r\n",
              "SportEventEntity.java": "package com.Casinop2p.entity;\r\n\r\nimport jakarta.persistence.*;\r\nimport lombok.AllArgsConstructor;\r\nimport lombok.Data;\r\nimport lombok.NoArgsConstructor;\r\nimport lombok.NonNull;\r\n\r\nimport java.util.Date;\r\n\r\n@Entity\r\n@Data\r\n@AllArgsConstructor\r\n@NoArgsConstructor\r\npublic class SportEventEntity {\r\n\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Long id;\r\n\r\n    @Column(name=\"event_name\")\r\n    private String eventName;\r\n\r\n    @Column(name=\"description\")\r\n    private String description;\r\n\r\n    @Column(name=\"event_date\")\r\n    private Date eventDate;\r\n\r\n    @NonNull\r\n    @Column(name=\"team1\")\r\n    private String team1;\r\n\r\n    @NonNull\r\n    @Column(name=\"team2\")\r\n    private String team2;\r\n\r\n    @Column(name=\"result\")\r\n    private String result;\r\n}\r\n",
              "UserEntity.java": "package com.Casinop2p.entity;\r\n\r\n\r\nimport com.Casinop2p.util.UserEnum;\r\nimport com.fasterxml.jackson.annotation.JsonIgnore;\r\nimport jakarta.persistence.*;\r\nimport lombok.*;\r\nimport org.springframework.security.core.GrantedAuthority;\r\nimport org.springframework.security.core.authority.SimpleGrantedAuthority;\r\nimport org.springframework.security.core.userdetails.UserDetails;\r\nimport java.util.Collection;\r\nimport java.util.List;\r\n\r\n@Data\r\n@Entity\r\n@AllArgsConstructor\r\n@NoArgsConstructor\r\n@Builder\r\npublic class UserEntity implements UserDetails {\r\n\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Long id;\r\n\r\n    private String name;\r\n\r\n   @Column(nullable = false)\r\n    private String password;\r\n\r\n    private float balance;\r\n\r\n\r\n    private String profileImage;\r\n\r\n    @Column(unique = true)\r\n    private String email;\r\n\r\n    @Enumerated(EnumType.STRING)\r\n    private UserEnum userEnum;\r\n\r\n    @OneToMany(mappedBy = \"roomOwner\", cascade = CascadeType.ALL, fetch = FetchType.LAZY)\r\n    @JsonIgnore\r\n    private List<RoomEntity> listRooms;\r\n\r\n\r\n\r\n    @Override\r\n    public Collection<? extends GrantedAuthority> getAuthorities() {\r\n        return List.of(new SimpleGrantedAuthority(\"ROLE_\" + this.userEnum.name()));\r\n    }\r\n\r\n    @Override\r\n    public String getUsername() {\r\n        return this.email;\r\n    }\r\n\r\n    @Override\r\n    public boolean isAccountNonExpired() {\r\n        return UserDetails.super.isAccountNonExpired();\r\n    }\r\n\r\n    @Override\r\n    public boolean isAccountNonLocked() {\r\n        return UserDetails.super.isAccountNonLocked();\r\n    }\r\n\r\n    @Override\r\n    public boolean isCredentialsNonExpired() {\r\n        return UserDetails.super.isCredentialsNonExpired();\r\n    }\r\n\r\n    @Override\r\n    public boolean isEnabled() {\r\n        return UserDetails.super.isEnabled();\r\n    }\r\n\r\n}\r\n"
            },
            "exceptions": {
              "DuplicatedException.java": "package com.Casinop2p.exceptions;\r\n\r\npublic class DuplicatedException extends RuntimeException {\r\n\r\n  public DuplicatedException(String message) {\r\n    super(message);\r\n  }\r\n}\r\n",
              "NotFoundException.java": "package com.Casinop2p.exceptions;\r\n\r\npublic class NotFoundException extends RuntimeException {\r\n\r\n  public NotFoundException(String message) {\r\n    super(message);\r\n  }\r\n}\r\n"
            },
            "Mapper": {
              "EntityMapper.java": "package com.Casinop2p.Mapper;\r\n\r\nimport com.Casinop2p.dto.RoomResponseDTO;\r\nimport com.Casinop2p.entity.RoomEntity;\r\n\r\npublic class EntityMapper {\r\n\r\n    // MÃ©todo para convertir RoomEntity a RoomResponseDTO\r\n    public static RoomResponseDTO toRoomResponseDTO(RoomEntity roomEntity) {\r\n        RoomResponseDTO dto = new RoomResponseDTO();\r\n        dto.setId(roomEntity.getId());\r\n        dto.setRoomName(roomEntity.getRoomName());\r\n        dto.setRoomOwnerName(roomEntity.getRoomOwner().getName()); // Solo devuelve el nombre del propietario\r\n        dto.setEnable(roomEntity.isEnable());\r\n        dto.setBet(roomEntity.getBet());\r\n        dto.setMaxUsers(roomEntity.getMaxUsers());\r\n        dto.setPrivateRoom(roomEntity.isPrivateRoom());\r\n        dto.setBetDescription(roomEntity.getBetDescription());\r\n        dto.setExpirationDate(roomEntity.getExpirationDate());\r\n        dto.setCreationDate(roomEntity.getCreationDate());\r\n        dto.setTotalAmount(roomEntity.getTotalAmount());\r\n        return dto;\r\n    }\r\n}\r\n",
              "UserMapper.java": "package com.Casinop2p.Mapper;\r\n\r\nimport com.Casinop2p.dto.UserDTOReq;\r\nimport com.Casinop2p.dto.UserDTORes;\r\nimport com.Casinop2p.entity.UserEntity;\r\nimport com.Casinop2p.util.UserEnum;\r\n\r\npublic class UserMapper {\r\n\r\n\r\n    public static UserDTORes toDTO(UserEntity userEntity) {\r\n        return new UserDTORes(userEntity.getId(), userEntity.getName(), userEntity.getBalance(), userEntity.getEmail(), userEntity.getUserEnum().toString());\r\n    }\r\n\r\n    public static UserEntity toUserEntity(UserDTOReq request) {\r\n        UserEnum userEnum = UserEnum.valueOf(request.userEnum());\r\n        return UserEntity.builder()\r\n                .name(request.name())\r\n                .email(request.email())\r\n                .password(request.password())\r\n                .balance(request.balance())\r\n                .userEnum(userEnum)\r\n                .build();\r\n    }\r\n\r\n}\r\n\r\n\r\n"
            },
            "repository": {
              "BetRepository.java": "package com.Casinop2p.repository;\r\n\r\nimport com.Casinop2p.entity.BetEntity;\r\nimport org.springframework.data.jpa.repository.JpaRepository;\r\n\r\npublic interface BetRepository extends JpaRepository<BetEntity,Long> {\r\n}\r\n",
              "RoomRepository.java": "package com.Casinop2p.repository;\r\n\r\nimport com.Casinop2p.entity.RoomEntity;\r\nimport org.springframework.data.jpa.repository.JpaRepository;\r\n\r\npublic interface RoomRepository extends JpaRepository<RoomEntity,Long> {\r\n}\r\n\r\n\r\n",
              "SportEventRepository.java": "package com.Casinop2p.repository;\r\n\r\nimport com.Casinop2p.entity.SportEventEntity;\r\nimport org.springframework.data.jpa.repository.JpaRepository;\r\n\r\npublic interface SportEventRepository extends JpaRepository<SportEventEntity,Long> {\r\n}\r\n",
              "UserRepository.java": "package com.Casinop2p.repository;\r\n\r\nimport com.Casinop2p.entity.UserEntity;\r\nimport org.springframework.data.jpa.repository.JpaRepository;\r\nimport java.util.Optional;\r\n\r\npublic interface UserRepository extends JpaRepository<UserEntity, Long> {\r\n    Optional<UserEntity> findByEmail(String email); // MÃ©todo para encontrar un usuario por email\r\n    Optional<UserEntity> findByName(String name);\r\n}\r\n\r\n"
            },
            "service": {
              "CloudinaryService.java": "package com.Casinop2p.service;\r\n\r\nimport com.cloudinary.Cloudinary;\r\nimport com.cloudinary.utils.ObjectUtils;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.springframework.stereotype.Service;\r\nimport org.springframework.web.multipart.MultipartFile;\r\n\r\nimport java.io.IOException;\r\nimport java.util.Map;\r\n\r\n@Service\r\n@RequiredArgsConstructor\r\npublic class CloudinaryService {\r\n\r\n    private final Cloudinary cloudinary;\r\n\r\n    public String uploadImage(MultipartFile file) throws IOException {\r\n        Map uploadResult = cloudinary.uploader().upload(file.getBytes(), ObjectUtils.emptyMap());\r\n        return (String) uploadResult.get(\"url\");\r\n    }\r\n\r\n    public String uploadImageByUrl(String imageUrl) throws IOException {\r\n        Map uploadResult = cloudinary.uploader().upload(imageUrl, ObjectUtils.emptyMap());\r\n        return (String) uploadResult.get(\"url\");\r\n    }\r\n}\r\n",
              "CustomUserDetailsService.java": "package com.Casinop2p.service;\r\n\r\nimport com.Casinop2p.entity.UserEntity;\r\nimport com.Casinop2p.repository.UserRepository;\r\nimport com.Casinop2p.util.UserEnum;\r\nimport org.springframework.security.core.GrantedAuthority;\r\nimport org.springframework.security.core.authority.SimpleGrantedAuthority;\r\nimport org.springframework.security.core.userdetails.UserDetails;\r\nimport org.springframework.security.core.userdetails.UsernameNotFoundException;\r\n\r\nimport java.util.Collection;\r\nimport java.util.List;\r\n\r\npublic class CustomUserDetailsService {\r\n\r\n    private UserRepository userRepository;\r\n\r\n    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {\r\n        UserEntity userEntity = userRepository.findByEmail(username)\r\n                .orElseThrow(() -> new UsernameNotFoundException(\"Usuario no encontrado: \" + username));\r\n\r\n        return new org.springframework.security.core.userdetails.User(\r\n                userEntity.getEmail(),\r\n                userEntity.getPassword(),\r\n                mapRolesToAuthorities(userEntity.getUserEnum())\r\n        );\r\n    }\r\n\r\n    private Collection<? extends GrantedAuthority> mapRolesToAuthorities(UserEnum userEnum) {\r\n        return List.of(new SimpleGrantedAuthority(userEnum.name()));\r\n    }\r\n}\r\n\r\n",
              "imp": {
                "RoomServiceImp.java": "package com.Casinop2p.service.imp;\r\n\r\nimport com.Casinop2p.entity.BetEntity;\r\nimport com.Casinop2p.entity.RoomEntity;\r\nimport com.Casinop2p.entity.UserEntity;\r\nimport com.Casinop2p.repository.BetRepository;\r\nimport com.Casinop2p.repository.RoomRepository;\r\nimport com.Casinop2p.repository.UserRepository;\r\nimport com.Casinop2p.service.RoomService;\r\nimport com.Casinop2p.util.BetEnum;\r\nimport jakarta.transaction.Transactional;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.springframework.scheduling.annotation.Scheduled;\r\nimport org.springframework.security.core.annotation.AuthenticationPrincipal;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport java.util.Date;\r\nimport java.util.List;\r\n\r\n@Service\r\n@RequiredArgsConstructor\r\npublic class RoomServiceImp implements RoomService {\r\n\r\n    private final RoomRepository roomRepository; // Acceso a la base de datos de salas\r\n    private final UserRepository userRepository; // Necesitamos acceder a los usuarios.\r\n    private final BetRepository betRepository;    // Acceso a la base de datos de apuestas\r\n\r\n    @Override\r\n    @Transactional// Crear una nueva sala\r\n    public RoomEntity createRoom(RoomEntity room) {\r\n        return roomRepository.save(room);\r\n    }\r\n\r\n    @Override // Obtener una sala por su ID\r\n    public RoomEntity getRoomById(Long id) {\r\n        return roomRepository.findById(id)\r\n                .orElseThrow(() -> new RuntimeException(\"Sala no encontrada con ID: \" + id));\r\n    }\r\n\r\n\r\n    @Override // Obtener todas las salas habilitadas\r\n    public List<RoomEntity> getAvailableRooms() {\r\n        return roomRepository.findAll().stream()\r\n                .filter(RoomEntity::isEnable)\r\n                .toList();\r\n    }\r\n\r\n\r\n    // MÃ©todo para que un usuario apueste en una sala\r\n    public BetEntity placeBet(Long roomId, Long userId, BetEnum betEnum, float amount) {\r\n       return null;\r\n    }\r\n\r\n\r\n    // MÃ©todo para cerrar la sala y calcular los resultados\r\n    public void closeRoom(Long roomId, BetEnum result) {\r\n\r\n    }\r\n\r\n\r\n    @Override// listar toda las salas\r\n    public List<RoomEntity> getAllRooms() {\r\n        return roomRepository.findAll();\r\n    }\r\n\r\n    @Override// actualizar sala\r\n    public RoomEntity updateRoom(Long id, RoomEntity room) {\r\n        RoomEntity existingRoom = getRoomById(id);\r\n        existingRoom.setRoomName(room.getRoomName());\r\n        existingRoom.setBet(room.getBet());\r\n        existingRoom.setMaxUsers(room.getMaxUsers());\r\n        existingRoom.setPrivateRoom(room.isPrivateRoom());\r\n        existingRoom.setBetDescription(room.getBetDescription());\r\n        return roomRepository.save(existingRoom);\r\n    }\r\n\r\n    @Override//eliminar sala\r\n    public void deleteRoom(Long id) {\r\n        roomRepository.deleteById(id);\r\n    }\r\n\r\n    @Override\r\n    public RoomEntity inviteUserToRoom(Long roomId, String username) {\r\n        RoomEntity room = getRoomById(roomId); // Buscamos la sala\r\n\r\n        if (!room.isPrivateRoom()) {\r\n            throw new RuntimeException(\"No se pueden invitar usuarios a una sala pÃºblica\");\r\n        }\r\n\r\n        UserEntity user = userRepository.findByName(username) // Buscamos el usuario por su nombre\r\n                .orElseThrow(() -> new RuntimeException(\"Usuario no encontrado: \" + username));\r\n\r\n        // AÃ±adimos el usuario a la lista de invitados\r\n        room.getInvitedUsers().add(user);\r\n        return roomRepository.save(room); // Guardamos los cambios en la sala\r\n    }\r\n\r\n    @Transactional\r\n    @Override\r\n    public RoomEntity addUserToRoom(Long roomId, UserEntity user) {\r\n        // Buscamos la sala por ID\r\n        RoomEntity room = getRoomById(roomId);\r\n\r\n\r\n        if (room.getUsersInRoom().stream().anyMatch(e -> e.getId().equals(user.getId()))) {\r\n            throw new RuntimeException(\"El usuario ya es parte de la sala.\");\r\n        }\r\n\r\n        // Verificamos si la sala estÃ¡ habilitada y si hay espacio\r\n        if (!room.isEnable()) {\r\n            throw new RuntimeException(\"La sala estÃ¡ cerrada para nuevas apuestas.\");\r\n        }\r\n\r\n        if (room.getUsersInRoom().size() >= room.getMaxUsers()) {\r\n            throw new RuntimeException(\"La sala ha alcanzado el nÃºmero mÃ¡ximo de usuarios.\");\r\n        }\r\n\r\n\r\n        // Agregamos al usuario a la sala\r\n        room.getUsersInRoom().add(user);\r\n\r\n        // Guardamos los cambios\r\n        return roomRepository.save(room);\r\n    }\r\n\r\n\r\n\r\n    @Scheduled(fixedRate = 60000) // Se ejecuta cada 60 segundos (1 minuto)\r\n    public void checkRoomExpiration() {\r\n        List<RoomEntity> rooms = roomRepository.findAll();\r\n        Date currentDate = new Date();\r\n\r\n        for (RoomEntity room : rooms) {\r\n            // Verifica si la fecha de expiraciÃ³n o event_date ha pasado y la sala aÃºn estÃ¡ habilitada\r\n            if (room.isEnable() && room.getExpirationDate() != null && room.getExpirationDate().before(currentDate)) {\r\n                room.setEnable(false); // Deshabilitar la sala\r\n                roomRepository.save(room); // Actualizar en la base de datos\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n",
                "SportEventServiceImp.java": "package com.Casinop2p.service.imp;\r\n\r\nimport com.Casinop2p.service.SportEventService;\r\n\r\npublic class SportEventServiceImp implements SportEventService {\r\n\r\n}\r\n",
                "UserDetailsServiceImp.java": "package com.Casinop2p.service.imp;\r\n\r\nimport com.Casinop2p.entity.UserEntity;\r\nimport com.Casinop2p.repository.UserRepository;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.security.core.userdetails.UserDetails;\r\nimport org.springframework.security.core.userdetails.UserDetailsService;\r\nimport org.springframework.security.core.userdetails.UsernameNotFoundException;\r\nimport org.springframework.stereotype.Service;\r\n\r\n@Service\r\npublic class UserDetailsServiceImp implements UserDetailsService {\r\n\r\n    @Autowired\r\n    private UserRepository userRepository;\r\n\r\n    @Override\r\n    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {\r\n        UserEntity user = userRepository.findByEmail(username)\r\n                .orElseThrow(() -> new UsernameNotFoundException(\"Usuario no encontrado con email: \" + username));\r\n\r\n        return user; // AsegÃºrate de retornar el objeto completo\r\n    }\r\n}\r\n",
                "UserServiceImp.java": "package com.Casinop2p.service.imp;\r\n\r\nimport com.Casinop2p.Mapper.UserMapper;\r\nimport com.Casinop2p.dto.UserDTOReq;\r\nimport com.Casinop2p.dto.UserDTORes;\r\nimport com.Casinop2p.entity.RoomEntity;\r\nimport com.Casinop2p.entity.UserEntity;\r\nimport com.Casinop2p.exceptions.NotFoundException;\r\nimport com.Casinop2p.repository.UserRepository;\r\nimport com.Casinop2p.service.UserService;\r\nimport com.Casinop2p.util.UserEnum;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.modelmapper.ModelMapper;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.security.crypto.password.PasswordEncoder;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\n@Service\r\n@RequiredArgsConstructor\r\npublic class UserServiceImp implements UserService {\r\n\r\n    @Autowired\r\n    private PasswordEncoder passwordEncoder;\r\n\r\n    private final UserRepository userRepository;\r\n    @Autowired\r\n    private ModelMapper modelMapper;  // Para convertir entre entidades y DTOs\r\n\r\n    @Override\r\n    public UserDTORes getUser(Long id) {\r\n\r\n        return UserMapper.toDTO(userRepository.findById(id).orElseThrow(() -> new NotFoundException(\"no se encontro usuario\")));\r\n    }\r\n\r\n\r\n    @Override\r\n    public UserDTORes createUser(UserDTOReq userDTOReq) {\r\n        UserEntity user = UserMapper.toUserEntity(userDTOReq);\r\n\r\n        if (user.getProfileImage() == null || user.getProfileImage().isEmpty()) {\r\n            user.setProfileImage(\"https://res.cloudinary.com/dmwsuzs94/image/upload/v1728906889/user_n1laeq.jpg\");\r\n        }\r\n\r\n        // AsegÃºrate de que estÃ¡s codificando la contraseÃ±a\r\n        user.setPassword(passwordEncoder.encode(user.getPassword()));\r\n\r\n        user = userRepository.save(user);\r\n        return UserMapper.toDTO(user);\r\n    }\r\n\r\n    public UserDTORes getUserById(Long id) {\r\n        UserEntity user = userRepository.findById(id)\r\n                .orElseThrow(() -> new NotFoundException(\"El usuario con ID: \" + id + \"no fue encontrado\"));\r\n        return UserMapper.toDTO(user);\r\n    }\r\n\r\n    public UserDTORes updateUser(Long id, UserDTOReq userDTOReq) {\r\n        UserEntity existingUser = userRepository.findById(id)\r\n                .orElseThrow(() -> new NotFoundException(\"El usuario con ID: \" + id + \"no fue encontrado\"));\r\n\r\n        existingUser.setName(userDTOReq.name());\r\n        existingUser.setPassword(userDTOReq.password());\r\n        existingUser.setBalance(userDTOReq.balance());\r\n        existingUser.setEmail(userDTOReq.email());\r\n        existingUser.setUserEnum(UserEnum.valueOf(userDTOReq.userEnum()));\r\n\r\n        existingUser = userRepository.save(existingUser);\r\n        return UserMapper.toDTO(existingUser);\r\n    }\r\n\r\n    public void deleteUser(Long id) {\r\n        UserEntity user = userRepository.findById(id)\r\n                .orElseThrow(() -> new NotFoundException(\"El usuario con ID: \" + id + \"no fue encontrado\"));\r\n        userRepository.delete(user);\r\n    }\r\n\r\n    public List<UserDTORes> getAllUsers() {\r\n        List<UserEntity> users = userRepository.findAll();\r\n        return users.stream()\r\n                .map(UserMapper::toDTO)\r\n                .collect(Collectors.toList());\r\n    }\r\n\r\n    public UserDTORes updateProfileImage(Long id, String imageUrl) {\r\n        UserEntity user = userRepository.findById(id)\r\n                .orElseThrow(() -> new NotFoundException(\"Usuario no encontrado\"));\r\n        user.setProfileImage(imageUrl);\r\n        userRepository.save(user);\r\n        return UserMapper.toDTO(user);\r\n    }\r\n\r\n    @Override\r\n    public List<RoomEntity> getAllRooms() {\r\n        return List.of();\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n"
              },
              "JwtUtil.java": "package com.Casinop2p.service;\r\n\r\n\r\nimport com.auth0.jwt.JWT;\r\nimport com.auth0.jwt.algorithms.Algorithm;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.core.env.Environment;\r\nimport org.springframework.stereotype.Service;\r\n\r\n@Service\r\npublic class JwtUtil {\r\n    @Autowired\r\n    private Environment environment;\r\n\r\n    public String generateToken(String username) {\r\n        Algorithm algorithm = Algorithm.HMAC256(environment.getProperty(\"SECRET_KEY_TOKEN_LOGIN\"));\r\n        return JWT.create()\r\n                .withIssuer(\"Casinop2p\")\r\n                .withSubject(username)\r\n                .sign(algorithm);\r\n    }\r\n\r\n    public String validateAndGetSubject(String token) {\r\n        Algorithm algorithm = Algorithm.HMAC256(environment.getProperty(\"SECRET_KEY_TOKEN_LOGIN\"));\r\n        return JWT.require(algorithm)\r\n                .withIssuer(\"Casinop2p\")\r\n                .build()\r\n                .verify(token)\r\n                .getSubject();\r\n    }\r\n}\r\n\r\n",
              "RoomService.java": "package com.Casinop2p.service;\r\n\r\nimport com.Casinop2p.entity.BetEntity;\r\nimport com.Casinop2p.entity.RoomEntity;\r\nimport com.Casinop2p.entity.UserEntity;\r\nimport com.Casinop2p.util.BetEnum;\r\nimport jakarta.transaction.Transactional;\r\n\r\nimport java.util.List;\r\n\r\npublic interface RoomService {\r\n\r\n    RoomEntity createRoom(RoomEntity room); // Crear una nueva sala\r\n\r\n    RoomEntity getRoomById(Long id); // Obtener una sala por ID\r\n\r\n    List<RoomEntity> getAllRooms(); // Obtener todas las salas\r\n\r\n    RoomEntity updateRoom(Long id, RoomEntity room); // Actualizar una sala\r\n\r\n    void deleteRoom(Long id); // Eliminar una sala\r\n\r\n    List<RoomEntity> getAvailableRooms(); // Obtener salas habilitadas\r\n\r\n    RoomEntity inviteUserToRoom(Long roomId, String name); // Invitar a un usuario a una sala privada\r\n\r\n    BetEntity placeBet(Long roomId, Long userId, BetEnum betEnum, float amount);\r\n\r\n\r\n    void closeRoom(Long roomId, BetEnum result);\r\n\r\n    @Transactional\r\n    RoomEntity addUserToRoom(Long roomId, UserEntity user);\r\n\r\n\r\n}\r\n\r\n\r\n",
              "SportEventService.java": "package com.Casinop2p.service;\r\n\r\npublic interface SportEventService {\r\n\r\n\r\n}\r\n",
              "UserService.java": "package com.Casinop2p.service;\r\n\r\n\r\nimport com.Casinop2p.dto.UserDTOReq;\r\nimport com.Casinop2p.dto.UserDTORes;\r\nimport com.Casinop2p.entity.RoomEntity;\r\n\r\nimport java.util.List;\r\n\r\npublic interface UserService {\r\n\r\n    public UserDTORes getUser(Long id);\r\n\r\n    UserDTORes createUser(UserDTOReq userDTOReq);\r\n\r\n    // Firma del mÃ©todo para obtener un usuario por su ID\r\n    UserDTORes getUserById(Long id);\r\n\r\n    // Firma del mÃ©todo para actualizar un usuario\r\n    UserDTORes updateUser(Long id, UserDTOReq userDTOReq);\r\n\r\n    // Firma del mÃ©todo para eliminar un usuario por su ID\r\n    void deleteUser(Long id);\r\n\r\n    // Firma del mÃ©todo para obtener todos los usuarios\r\n    List<UserDTORes> getAllUsers();\r\n\r\n    UserDTORes updateProfileImage(Long id, String imageUrl);\r\n\r\n    List<RoomEntity> getAllRooms();\r\n\r\n\r\n}\r\n"
            },
            "util": {
              "BetEnum.java": "package com.Casinop2p.util;\r\n\r\npublic enum BetEnum {\r\n\r\n    WIN, LOSS, DRAW\r\n}\r\n",
              "JwtAuthenticationFilter.java": "package com.Casinop2p.util;\r\n\r\nimport com.Casinop2p.service.JwtUtil;\r\nimport jakarta.servlet.FilterChain;\r\nimport jakarta.servlet.ServletException;\r\nimport jakarta.servlet.http.HttpServletRequest;\r\nimport jakarta.servlet.http.HttpServletResponse;\r\nimport lombok.NonNull;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\r\nimport org.springframework.security.core.context.SecurityContextHolder;\r\nimport org.springframework.security.core.userdetails.UserDetails;\r\nimport org.springframework.security.core.userdetails.UserDetailsService;\r\nimport org.springframework.stereotype.Component;\r\nimport org.springframework.web.filter.OncePerRequestFilter;\r\n\r\nimport java.io.IOException;\r\n\r\n@Component\r\n@RequiredArgsConstructor\r\npublic class JwtAuthenticationFilter extends OncePerRequestFilter {\r\n\r\n    private final UserDetailsService userDetailsService;\r\n    private final JwtUtil jwtUtil;\r\n\r\n\r\n\r\n    @Override\r\n    protected void doFilterInternal(\r\n            @NonNull HttpServletRequest request,\r\n            @NonNull HttpServletResponse response,\r\n            @NonNull FilterChain filterChain) throws ServletException, IOException {\r\n\r\n        String authorization = request.getHeader(\"Authorization\");\r\n        if (authorization != null && authorization.startsWith(\"Bearer \")) {\r\n            String token = authorization.substring(7);\r\n            String subject = jwtUtil.validateAndGetSubject(token);\r\n            UserDetails user = userDetailsService.loadUserByUsername(subject);\r\n            UsernamePasswordAuthenticationToken authentication = new UsernamePasswordAuthenticationToken(\r\n                    user,\r\n                    null,\r\n                    user.getAuthorities()\r\n            );\r\n            SecurityContextHolder.getContext().setAuthentication(authentication);\r\n        }\r\n        filterChain.doFilter(request, response);\r\n    }\r\n}\r\n\r\n",
              "RoomEnum.java": "package com.Casinop2p.util;\r\n\r\npublic enum RoomEnum {\r\n\r\n    SPORT, ELECTIONS, CASINO, CUSTOM\r\n}\r\n",
              "SportEnum.java": "package com.Casinop2p.util;\r\n\r\npublic enum SportEnum {\r\n\r\n    COINFLIP, FUTBOL, BASKETBALL, BOXING, MMA\r\n}\r\n",
              "UserEnum.java": "package com.Casinop2p.util;\r\n\r\npublic enum UserEnum {\r\n\r\n    ADMIN,USER,INVITED\r\n}\r\n"
            }
          }
        }
      },
      "resources": {
        "application.properties": "spring.application.name=Casinop2p\r\nserver.servlet.context-path=/api/v1\r\nspring.config.import=optional:file:.env[.properties]\r\nspring.datasource.url=${SPRING_DATASOURCE_URL}\r\nspring.datasource.username=${SPRING_DATASOURCE_USERNAME}\r\nspring.datasource.password=${SPRING_DATASOURCE_PASSWORD}\r\n#spring.jpa.hibernate.ddl-auto=update\r\n\r\nspring.sql.init.mode=never\r\nspring.sql.init.data-locations=classpath:data.sql\r\n\r\n#===== CLOUDINARY ==========\r\n\r\ncloudinary.cloud_name=${KEY_NAME}\r\ncloudinary.api_key=${API_KEY}\r\ncloudinary.api_secret=${API_SECRET}\r\n\r\n\r\n\r\n#=====POSTGRESQL LOCAL santy==========\r\n\r\n#spring.datasource.url=jdbc:postgresql://localhost:5432/casino_db?serverTimezone=America/Argentina/Buenos_Aires\r\n#spring.datasource.username=postgres\r\n#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect\r\n#.jpa.hibernate.ddl-auto=update\r\n#spring.jpa.show-sql=true\r\n\r\n#=====POSTGRESQL remoto==========\r\n\r\n#spring.datasource.url=jdbc:postgresql://dpg-cs2u1iu8ii6s738c68ng-a.oregon-postgres.render.com:5432/casino_db_ngog\r\n#spring.datasource.username=casino_db_ngog_user\r\n#spring.datasource.password=17fqHw97C23s428Cn8xFSdSZLprdcv2G\r\nspring.jpa.hibernate.ddl-auto=update\r\nspring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect\r\n\r\n\r\n#spring.jpa.show-sql=true\r\n#=================================================================\r\n\r\n\r\n",
        "data.sql": "INSERT INTO \"public\".\"user_entity\" (\"id\", \"name\", \"balance\", \"email\", \"password\", \"user_enum\", \"profile_image\") VALUES\r\n(2, 'facu2', 100, 'facu@test.com', '$2a$10$N84QxI8dBGUmFpfwn9BHF.8RiAWvRhGr03.UBJ3oH0H6E4VNLjrmG', 'USER', NULL);\r\nINSERT INTO \"public\".\"user_entity\" (\"id\", \"name\", \"balance\", \"email\", \"password\", \"user_enum\", \"profile_image\") VALUES\r\n(3, 'facu3', 110, 'facu@test2.com', '$2a$10$0t03ulAG3.j6i.hzPGN2UO3PsWMgWdgWn35zQNBoObtzqlN0Cbhnq', 'ADMIN', NULL);\r\nINSERT INTO \"public\".\"user_entity\" (\"id\", \"name\", \"balance\", \"email\", \"password\", \"user_enum\", \"profile_image\") VALUES\r\n(5, 'facu3', 110, 'facu@test3.com', '$2a$10$E67hWlnF2g7rV32775dURe43hi5wN.qQUE.NQmN.HIhyBAvws2JUa', 'ADMIN', NULL);\r\nINSERT INTO \"public\".\"user_entity\" (\"id\", \"name\", \"balance\", \"email\", \"password\", \"user_enum\", \"profile_image\") VALUES\r\n(8, 'nicolas', 2000, 'nico@test.com', '$2a$10$/n8fEO9alBt.BBpNDV1W8eejdjvgUZ0s7oYN9KPM.MfaXf/3U9RoO', 'USER', 'http://res.cloudinary.com/dmwsuzs94/image/upload/v1729012002/hodgask7wlsdc6kqikvj.jpg'),\r\n(9, 'eduardo', 3000, 'edu@test.com', '$2a$10$NGNI6uxGv/7E/fgyeAEaYOSg5rVovRNv7eJQ6pqqGKPnPHW4nz36O', 'USER', 'https://res.cloudinary.com/dmwsuzs94/image/upload/v1728906889/user_n1laeq.jpg'),\r\n(10, 'santy', 10000, 'santy@test.com', '$2a$10$sxV.EBBMVJv8a2BPBMX1kO/2N0ip67w27zk3LV2Nxsg6X01cRew3C', 'USER', 'http://res.cloudinary.com/dmwsuzs94/image/upload/v1729013790/rwd1xghsaabhtulifpae.jpg');"
      }
    },
    "test": {
      "java": {
        "com": {
          "Casinop2p": {
            "Casinop2pApplicationTests.java": "package com.Casinop2p;\r\n\r\nimport org.junit.jupiter.api.Test;\r\nimport org.springframework.boot.test.context.SpringBootTest;\r\n\r\n@SpringBootTest\r\nclass Casinop2pApplicationTests {\r\n\r\n\t@Test\r\n\tvoid contextLoads() {\r\n\t}\r\n\r\n}\r\n"
          }
        }
      }
    }
  }
}