{
  "src": {
    "main": {
      "java": {
        "com": {
          "Casinop2p": {
            "Casinop2pApplication.java": "package com.Casinop2p;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\n\r\n@SpringBootApplication\r\npublic class Casinop2pApplication {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tSpringApplication.run(Casinop2pApplication.class, args);\r\n\t}\r\n\r\n}\r\n",
            "config": {
              "AppConfig.java": "package com.Casinop2p.config;\r\n\r\nimport org.modelmapper.ModelMapper;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\n\r\n@Configuration\r\npublic class AppConfig {\r\n\r\n    @Bean\r\n    public ModelMapper modelMapper() {\r\n        return new ModelMapper();\r\n    }\r\n}\r\n",
              "SecurityConfig.java": "package com.Casinop2p.config;\r\n\r\nimport com.Casinop2p.service.CustomUserDetailsService;\r\nimport com.Casinop2p.util.JwtAuthenticationFilter;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.security.authentication.AuthenticationManager;\r\nimport org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;\r\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\r\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\r\nimport org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;\r\nimport org.springframework.security.config.http.SessionCreationPolicy;\r\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\r\nimport org.springframework.security.crypto.password.PasswordEncoder;\r\nimport org.springframework.security.web.SecurityFilterChain;\r\nimport org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;\r\n\r\n@Configuration\r\n@EnableWebSecurity\r\npublic class SecurityConfig {\r\n\r\n    private final JwtAuthenticationFilter jwtAuthenticationFilter;\r\n    private final CustomUserDetailsService userDetailsService;\r\n\r\n    public SecurityConfig(JwtAuthenticationFilter jwtAuthenticationFilter, CustomUserDetailsService userDetailsService) {\r\n        this.jwtAuthenticationFilter = jwtAuthenticationFilter;\r\n        this.userDetailsService = userDetailsService;\r\n    }\r\n\r\n    @Bean\r\n    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\r\n        return http\r\n                .csrf(AbstractHttpConfigurer::disable)\r\n                .sessionManagement(sessionManagement ->\r\n                        sessionManagement.sessionCreationPolicy(SessionCreationPolicy.STATELESS))\r\n                .authorizeHttpRequests(authorizeRequests ->\r\n                        authorizeRequests\r\n\r\n                                .anyRequest().permitAll())\r\n                .addFilterBefore(jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class)\r\n\r\n        .build();\r\n    }\r\n\r\n    @Bean\r\n    public AuthenticationManager authenticationManager(AuthenticationConfiguration authConfig) throws Exception {\r\n        return authConfig.getAuthenticationManager();\r\n    }\r\n\r\n    @Bean\r\n    public PasswordEncoder passwordEncoder(){\r\n        return new BCryptPasswordEncoder();\r\n    }\r\n}\r\n\r\n"
            },
            "controller": {
              "AuthController.java": "package com.Casinop2p.controller;\r\n\r\nimport com.Casinop2p.dto.LoginDTO;\r\nimport com.Casinop2p.service.CustomUserDetailsService;\r\nimport com.Casinop2p.service.JwtUtil;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.security.authentication.AuthenticationManager;\r\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\r\nimport org.springframework.security.core.Authentication;\r\nimport org.springframework.security.core.context.SecurityContextHolder;\r\nimport org.springframework.security.core.userdetails.UserDetails;\r\nimport org.springframework.web.bind.annotation.PostMapping;\r\nimport org.springframework.web.bind.annotation.RequestBody;\r\nimport org.springframework.web.bind.annotation.RequestMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n@RestController\r\n@RequestMapping(\"/api/auth\")\r\n@RequiredArgsConstructor\r\npublic class AuthController {\r\n\r\n    private final AuthenticationManager authenticationManager;\r\n    private final JwtUtil jwtUtil;\r\n    private final CustomUserDetailsService userDetailsService;\r\n\r\n    @PostMapping(\"/login\")\r\n    public ResponseEntity<String> login(@RequestBody LoginDTO loginDTO) {\r\n        Authentication authentication = authenticationManager.authenticate(\r\n                new UsernamePasswordAuthenticationToken(loginDTO.email(), loginDTO.password()) // Usa los m√©todos de acceso de los registros\r\n        );\r\n\r\n        SecurityContextHolder.getContext().setAuthentication(authentication);\r\n        String jwt = jwtUtil.generateToken((UserDetails) authentication.getPrincipal());\r\n\r\n        return ResponseEntity.ok(jwt);\r\n    }\r\n\r\n}\r\n\r\n\r\n",
              "GlobalExceptionController.java": "package com.Casinop2p.controller;\r\n\r\nimport com.Casinop2p.dto.ErrorDtoRes;\r\nimport com.Casinop2p.exceptions.DuplicatedException;\r\nimport com.Casinop2p.exceptions.NotFoundException;\r\nimport jakarta.servlet.http.HttpServletRequest;\r\nimport java.time.LocalDateTime;\r\nimport java.time.ZoneId;\r\nimport java.util.List;\r\nimport org.springframework.http.HttpStatus;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.http.converter.HttpMessageNotReadableException;\r\nimport org.springframework.security.authentication.BadCredentialsException;\r\nimport org.springframework.validation.FieldError;\r\nimport org.springframework.validation.ObjectError;\r\nimport org.springframework.web.HttpMediaTypeNotSupportedException;\r\nimport org.springframework.web.HttpRequestMethodNotSupportedException;\r\nimport org.springframework.web.bind.MethodArgumentNotValidException;\r\nimport org.springframework.web.bind.annotation.ExceptionHandler;\r\nimport org.springframework.web.bind.annotation.RestControllerAdvice;\r\nimport org.springframework.web.method.annotation.MethodArgumentTypeMismatchException;\r\n\r\n@RestControllerAdvice\r\npublic class GlobalExceptionController {\r\n\r\n  ZoneId zoneId = ZoneId.of(\"America/Buenos_Aires\");\r\n  LocalDateTime timestamp = LocalDateTime.now(zoneId);\r\n\r\n  @ExceptionHandler(NotFoundException.class)\r\n  public ResponseEntity<ErrorDtoRes> handleNotFoundException(NotFoundException exception,\r\n      HttpServletRequest request) {\r\n\r\n    int httpStatus = HttpStatus.NOT_FOUND.value();\r\n    ErrorDtoRes response = new ErrorDtoRes(\r\n        httpStatus,\r\n        request.getMethod(),\r\n        \"Elemento no econtrado\",\r\n        exception.getMessage(),\r\n        timestamp,\r\n        null\r\n    );\r\n\r\n    return ResponseEntity.status(httpStatus).body(response);\r\n  }\r\n\r\n  @ExceptionHandler(DuplicatedException.class)\r\n  public ResponseEntity<ErrorDtoRes> handleDuplicatedException(DuplicatedException exception,\r\n      HttpServletRequest request) {\r\n\r\n    int httpStatus = HttpStatus.CONFLICT.value();\r\n    ErrorDtoRes response = new ErrorDtoRes(\r\n        httpStatus,\r\n        request.getMethod(),\r\n        \"Elemento duplicado\",\r\n        exception.getMessage(),\r\n        timestamp,\r\n        null\r\n    );\r\n\r\n    return ResponseEntity.status(httpStatus).body(response);\r\n  }\r\n\r\n  @ExceptionHandler(IllegalArgumentException.class)\r\n  public ResponseEntity<ErrorDtoRes> handleIllegalArgumentException(\r\n      IllegalArgumentException exception, HttpServletRequest request) {\r\n\r\n    int httpStatus = HttpStatus.BAD_REQUEST.value();\r\n    ErrorDtoRes apiErrorResponse = new ErrorDtoRes(\r\n        httpStatus,\r\n        request.getMethod(),\r\n        \"Elemento con Argumentos invalidos\",\r\n        exception.getMessage(),\r\n        timestamp,\r\n        null\r\n    );\r\n\r\n    return ResponseEntity.status(httpStatus).body(apiErrorResponse);\r\n  }\r\n\r\n  @ExceptionHandler(HttpMessageNotReadableException.class)\r\n  public ResponseEntity<ErrorDtoRes> handleHttpMessageNotReadableException(\r\n      HttpMessageNotReadableException exception, HttpServletRequest request) {\r\n\r\n    int httpStatus = HttpStatus.BAD_REQUEST.value();\r\n    ErrorDtoRes apiErrorResponse = new ErrorDtoRes(\r\n        httpStatus,\r\n        request.getMethod(),\r\n        \"Error en la lectura del HTTP body, Compruebe que el formato es correcto y/o contenga \"\r\n            + \"data valida.\",\r\n        exception.getMessage(),\r\n        timestamp,\r\n        null\r\n    );\r\n\r\n    return ResponseEntity.status(httpStatus).body(apiErrorResponse);\r\n  }\r\n\r\n  @ExceptionHandler(HttpMediaTypeNotSupportedException.class)\r\n  public ResponseEntity<ErrorDtoRes> handleHttpMediaTypeNotSupportedException(\r\n      HttpMediaTypeNotSupportedException exception,\r\n      HttpServletRequest request) {\r\n\r\n    int httpStatus = HttpStatus.UNSUPPORTED_MEDIA_TYPE.value();\r\n    ErrorDtoRes apiErrorResponse = new ErrorDtoRes(\r\n        httpStatus,\r\n        request.getMethod(),\r\n        \"Media Type no soportados, los Media Type soportados son: \"\r\n            + exception.getSupportedMediaTypes()\r\n            + \" y tu enviaste: \" + exception.getContentType(),\r\n        exception.getMessage(),\r\n        timestamp,\r\n        null\r\n    );\r\n\r\n    return ResponseEntity.status(httpStatus).body(apiErrorResponse);\r\n  }\r\n\r\n  @ExceptionHandler(HttpRequestMethodNotSupportedException.class)\r\n  public ResponseEntity<ErrorDtoRes> handleHttpRequestMethodNotSupportedException(\r\n      HttpRequestMethodNotSupportedException exception,\r\n      HttpServletRequest request) {\r\n\r\n    int httpStatus = HttpStatus.METHOD_NOT_ALLOWED.value();\r\n    ErrorDtoRes apiErrorResponse = new ErrorDtoRes(\r\n        httpStatus,\r\n        request.getMethod(),\r\n        \"metodo HTTP no permitado, Revisa el metodo HTTP de la request.\",\r\n        exception.getMessage(),\r\n        timestamp,\r\n        null\r\n    );\r\n\r\n    return ResponseEntity.status(httpStatus).body(apiErrorResponse);\r\n  }\r\n\r\n  @ExceptionHandler(MethodArgumentNotValidException.class)\r\n  public ResponseEntity<ErrorDtoRes> handleMethodArgumentNotValidException(\r\n      MethodArgumentNotValidException exception, HttpServletRequest request) {\r\n\r\n    int httpStatus = HttpStatus.BAD_REQUEST.value();\r\n    List<ObjectError> errors = exception.getAllErrors();\r\n    List<String> details = errors.stream().map(error -> {\r\n      if (error instanceof FieldError fieldError) {\r\n        return fieldError.getField() + \": \" + fieldError.getDefaultMessage();\r\n      }\r\n\r\n      return error.getDefaultMessage();\r\n    }).toList();\r\n\r\n    ErrorDtoRes apiErrorResponse = new ErrorDtoRes(\r\n        httpStatus,\r\n        request.getMethod(),\r\n        \"La request tiene parametros invalidos o incompletos.\",\r\n        exception.getMessage(),\r\n        timestamp,\r\n        details\r\n    );\r\n\r\n    return ResponseEntity.status(httpStatus).body(apiErrorResponse);\r\n  }\r\n\r\n  @ExceptionHandler(MethodArgumentTypeMismatchException.class)\r\n  public ResponseEntity<ErrorDtoRes> handleMethodArgumentTypeMismatchException(\r\n      MethodArgumentTypeMismatchException exception,\r\n      HttpServletRequest request) {\r\n\r\n    int httpStatus = HttpStatus.BAD_REQUEST.value();\r\n    Object valueRejected = exception.getValue();\r\n    String propertyName = exception.getName();\r\n\r\n    ErrorDtoRes apiErrorResponse = new ErrorDtoRes(\r\n        httpStatus,\r\n        request.getMethod(),\r\n        \"Request Invalido: el valor proporcionado \" + valueRejected\r\n            + \" no tiene el type esperado \" + \"para el \" + propertyName,\r\n        exception.getMessage(),\r\n        timestamp,\r\n        null\r\n    );\r\n\r\n    return ResponseEntity.status(httpStatus).body(apiErrorResponse);\r\n  }\r\n\r\n  @ExceptionHandler(BadCredentialsException.class)\r\n  public ResponseEntity<ErrorDtoRes> handleBadCredentialsException(\r\n      BadCredentialsException exception,\r\n      HttpServletRequest request) {\r\n\r\n    int httpStatus = HttpStatus.UNAUTHORIZED.value();\r\n    ErrorDtoRes apiErrorResponse = new ErrorDtoRes(\r\n        httpStatus,\r\n        request.getMethod(),\r\n        \"Credenciales invalidas\",\r\n        exception.getMessage(),\r\n        timestamp,\r\n        null\r\n    );\r\n\r\n    return ResponseEntity.status(httpStatus).body(apiErrorResponse);\r\n  }\r\n\r\n  @ExceptionHandler(Exception.class)\r\n  public ResponseEntity<ErrorDtoRes> handleAllExceptions(Exception exception,\r\n      HttpServletRequest request) {\r\n\r\n    int httpStatus = HttpStatus.INTERNAL_SERVER_ERROR.value();\r\n    ErrorDtoRes apiErrorResponse = new ErrorDtoRes(\r\n        httpStatus,\r\n        request.getMethod(),\r\n        \"Ocurrio un error inesperado.\",\r\n        exception.getMessage(),\r\n        timestamp,\r\n        null\r\n    );\r\n\r\n    return ResponseEntity.status(httpStatus).body(apiErrorResponse);\r\n  }\r\n\r\n\r\n\r\n\r\n}\r\n",
              "UserController.java": "package com.Casinop2p.controller;\r\n\r\nimport com.Casinop2p.dto.UserDTOReq;\r\nimport com.Casinop2p.dto.UserDTORes;\r\nimport com.Casinop2p.entity.UserEntity;\r\nimport com.Casinop2p.repository.UserRepository;\r\nimport com.Casinop2p.service.UserService;\r\nimport jakarta.validation.Valid;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.http.HttpStatus;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\nimport java.util.List;\r\nimport java.util.Optional;\r\n\r\n\r\n@RequiredArgsConstructor\r\n@CrossOrigin(\"*\")\r\n@RestController\r\n@RequestMapping(\"/api/users\")\r\npublic class UserController {\r\n\r\n    @Autowired\r\n    private UserService userService;\r\n\r\n    // Crear un nuevo usuario\r\n    @PostMapping\r\n    public ResponseEntity<UserDTORes> createUser(@Valid @RequestBody UserDTOReq userDTOReq) {\r\n        UserDTORes createdUser = userService.createUser(userDTOReq);\r\n        return ResponseEntity.status(HttpStatus.CREATED).body(createdUser);\r\n    }\r\n\r\n    // Obtener un usuario por ID\r\n    @GetMapping(\"/{id}\")\r\n    public ResponseEntity<UserDTORes> getUserById(@PathVariable Long id) {\r\n        UserDTORes user = userService.getUserById(id);\r\n        return ResponseEntity.ok(user);\r\n    }\r\n\r\n    // Actualizar un usuario por ID\r\n    @PutMapping(\"/{id}\")\r\n    public ResponseEntity<UserDTORes> updateUser(@PathVariable Long id, @Valid @RequestBody UserDTOReq userDTOReq) {\r\n        UserDTORes updatedUser = userService.updateUser(id, userDTOReq);\r\n        return ResponseEntity.ok(updatedUser);\r\n    }\r\n\r\n    // Eliminar un usuario por ID\r\n    @DeleteMapping(\"/{id}\")\r\n    public ResponseEntity<Void> deleteUser(@PathVariable Long id) {\r\n        userService.deleteUser(id);\r\n        return ResponseEntity.noContent().build();\r\n    }\r\n\r\n    // Obtener todos los usuarios\r\n    @GetMapping\r\n    public ResponseEntity<List<UserDTORes>> getAllUsers() {\r\n        List<UserDTORes> users = userService.getAllUsers();\r\n        return ResponseEntity.ok(users);\r\n    }\r\n}\r\n\r\n"
            },
            "dto": {
              "ErrorDtoRes.java": "package com.Casinop2p.dto;\r\n\r\nimport com.fasterxml.jackson.annotation.JsonFormat;\r\nimport com.fasterxml.jackson.annotation.JsonProperty;\r\nimport java.time.LocalDateTime;\r\nimport java.util.List;\r\n\r\npublic record ErrorDtoRes(\r\n    @JsonProperty(\"status_code\")\r\n    Integer statusCode,\r\n    @JsonProperty(\"http_method\")\r\n    String httpMethod,\r\n    String message,\r\n    @JsonProperty(\"server_message\")\r\n    String backendMessage,\r\n    @JsonFormat(pattern = \"yyyy-MM-dd HH:mm\")\r\n    LocalDateTime timestamp,\r\n    List<String> details\r\n) {\r\n\r\n}\r\n",
              "LoginDTO.java": "package com.Casinop2p.dto;\r\n\r\nimport jakarta.validation.constraints.Email;\r\nimport jakarta.validation.constraints.Pattern;\r\n\r\npublic record LoginDTO(\r\n        @Pattern(regexp = \"^(?=.[0-9])(?=.[a-z])(?=.[A-Z])(?=.[@#$%^&+=])(?=\\\\S+$).{8,}$\",\r\n                message = \"La contrase√±a debe contener al menos un d√≠gito, una letra min√∫scula, una letra may√∫scula y un car√°cter especial.\")\r\n        String password,@Email\r\nString email\r\n) {\r\n}\r\n",
              "UserDTOReq.java": "package com.Casinop2p.dto;\r\n\r\nimport jakarta.validation.constraints.Email;\r\nimport jakarta.validation.constraints.Pattern;\r\nimport jakarta.validation.constraints.Size;\r\nimport lombok.NonNull;\r\n\r\npublic record UserDTOReq(\r\n                         @NonNull\r\n                              @Size(min = 3, max = 20)\r\n                      String name,\r\n                         @NonNull\r\n                      @Size(min = 4, message = \"La contrase√±a debe tener al menos 8 caracteres\")\r\n                      //@Pattern(regexp = \"^(?=.[0-9])(?=.[a-z])(?=.[A-Z])(?=.[@#$%^&+=])(?=\\\\S+$).{8,}$\",\r\n                              //message = \"La contrase√±a debe contener al menos un d√≠gito, una letra min√∫scula, una letra may√∫scula y un car√°cter especial.\")\r\n                      String password,\r\n\r\n                         float balance,\r\n                         @NonNull\r\n                              @Email\r\n                      String email,\r\n                         String userEnum) {\r\n\r\n\r\n\r\n}\r\n",
              "UserDTORes.java": "package com.Casinop2p.dto;\r\n\r\nimport jakarta.validation.constraints.Email;\r\nimport jakarta.validation.constraints.Pattern;\r\nimport jakarta.validation.constraints.Size;\r\nimport lombok.NonNull;\r\n\r\npublic record UserDTORes(Long id,\r\n                      String name,\r\n                         float balance,\r\n                      String email,\r\n                         String userEnum) {\r\n\r\n\r\n\r\n}\r\n"
            },
            "entity": {
              "BetEntity.java": "package com.Casinop2p.entity;\r\n\r\nimport com.Casinop2p.util.BetEnum;\r\nimport jakarta.persistence.*;\r\nimport lombok.Data;\r\n\r\nimport java.util.HashSet;\r\nimport java.util.Set;\r\n\r\n@Entity\r\n@Data\r\npublic class BetEntity {\r\n\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Long id;\r\n\r\n    //private UserEntity user;\r\n    private String team;\r\n    @Enumerated(EnumType.STRING)\r\n    private BetEnum betEnum;\r\n    //private RoomEntity room;\r\n\r\n\r\n\r\n\r\n}\r\n",
              "RoomEntity.java": "package com.Casinop2p.entity;\r\n\r\nimport com.Casinop2p.util.BetEnum;\r\nimport jakarta.persistence.*;\r\nimport lombok.Data;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Date;\r\nimport java.util.HashSet;\r\nimport java.util.Set;\r\n\r\n\r\n@Entity\r\n@Data\r\npublic class RoomEntity {\r\n\r\n\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Long id;\r\n    private String roomName;\r\n    private boolean enable;\r\n    //private UserEntity roomOwner;\r\n    @Enumerated(EnumType.STRING)\r\n    private BetEnum result;\r\n    private float bet;\r\n    private int maxUsers;\r\n    //private ArrayList<UserEntity> usersInRoom;\r\n    private boolean privateRoom;\r\n    private String betDescription;\r\n    private Date expirationDate; //esto se obtiene automaticamente\r\n    private Date creationDate; //esto se obtiene automaticamente\r\n    private float totalAmount;\r\n\r\n\r\n    //@ManyToMany(fetch = FetchType.EAGER, cascade = CascadeType.ALL)\r\n    //@JoinTable(name = \"bets\", joinColumns = @JoinColumn(name = \"bet_id\"), inverseJoinColumns = @JoinColumn(name = \"room_id\"))\r\n    //private Set<BetEntity> betsList = new HashSet<>();\r\n\r\n\r\n\r\n\r\n}\r\n",
              "UserEntity.java": "package com.Casinop2p.entity;\r\n\r\n\r\nimport com.Casinop2p.util.UserEnum;\r\nimport jakarta.persistence.*;\r\nimport jakarta.validation.constraints.Email;\r\nimport jakarta.validation.constraints.Pattern;\r\nimport jakarta.validation.constraints.Size;\r\nimport lombok.Data;\r\nimport lombok.NonNull;\r\n\r\nimport java.util.HashSet;\r\nimport java.util.Set;\r\n\r\n@Data\r\n@Entity\r\npublic class UserEntity {\r\n\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Long id;\r\n\r\n\r\n\r\n    private String Name;\r\n\r\n\r\n   @Column(nullable = false)\r\n    private String password;\r\n\r\n    private float balance;\r\n\r\n\r\n    @Column(unique = true)\r\n    private String email;\r\n\r\n    @Enumerated(EnumType.STRING)\r\n    private UserEnum userEnum;\r\n\r\n    @ManyToMany(fetch = FetchType.EAGER, cascade = CascadeType.ALL)\r\n    @JoinTable(name = \"bet_list\", joinColumns = @JoinColumn(name = \"user_id\"), inverseJoinColumns = @JoinColumn(name = \"room_id\"))\r\n    private Set<RoomEntity> betList = new HashSet<>();\r\n\r\n\r\n}\r\n"
            },
            "exceptions": {
              "DuplicatedException.java": "package com.Casinop2p.exceptions;\r\n\r\npublic class DuplicatedException extends RuntimeException {\r\n\r\n  public DuplicatedException(String message) {\r\n    super(message);\r\n  }\r\n}\r\n",
              "NotFoundException.java": "package com.Casinop2p.exceptions;\r\n\r\npublic class NotFoundException extends RuntimeException {\r\n\r\n  public NotFoundException(String message) {\r\n    super(message);\r\n  }\r\n}\r\n"
            },
            "Mapper": {
              "UserMapper.java": "package com.Casinop2p.Mapper;\r\n\r\nimport com.Casinop2p.dto.UserDTORes;\r\nimport com.Casinop2p.entity.UserEntity;\r\n\r\npublic class UserMapper {\r\n\r\n    public static UserDTORes toDTO(UserEntity userEntity){\r\n        return new UserDTORes(userEntity.getId(), userEntity.getName(), userEntity.getBalance(), userEntity.getEmail(),userEntity.getUserEnum().toString());\r\n    }\r\n}\r\n"
            },
            "repository": {
              "BetRepository.java": "package com.Casinop2p.repository;\r\n\r\nimport com.Casinop2p.entity.BetEntity;\r\nimport org.springframework.data.jpa.repository.JpaRepository;\r\n\r\npublic interface BetRepository extends JpaRepository<BetEntity,Long> {\r\n}\r\n",
              "RoomRepository.java": "package com.Casinop2p.repository;\r\n\r\nimport com.Casinop2p.entity.RoomEntity;\r\nimport org.springframework.data.jpa.repository.JpaRepository;\r\n\r\npublic interface RoomRepository extends JpaRepository<RoomEntity,Long> {\r\n}\r\n\r\n\r\n",
              "UserRepository.java": "package com.Casinop2p.repository;\r\n\r\nimport com.Casinop2p.entity.UserEntity;\r\nimport org.springframework.data.jpa.repository.JpaRepository;\r\n\r\nimport org.springframework.data.jpa.repository.JpaRepository;\r\nimport java.util.Optional;\r\n\r\npublic interface UserRepository extends JpaRepository<UserEntity, Long> {\r\n    Optional<UserEntity> findByEmail(String email); // M√©todo para encontrar un usuario por email\r\n}\r\n\r\n"
            },
            "service": {
              "CustomUserDetailsService.java": "package com.Casinop2p.service;\r\n\r\nimport com.Casinop2p.entity.UserEntity;\r\nimport com.Casinop2p.repository.UserRepository;\r\nimport com.Casinop2p.util.UserEnum;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.springframework.security.core.GrantedAuthority;\r\nimport org.springframework.security.core.authority.SimpleGrantedAuthority;\r\nimport org.springframework.security.core.userdetails.UserDetails;\r\nimport org.springframework.security.core.userdetails.UserDetailsService;\r\nimport org.springframework.security.core.userdetails.UsernameNotFoundException;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport java.util.Collection;\r\nimport java.util.List;\r\n\r\n@Service\r\n@RequiredArgsConstructor\r\npublic class CustomUserDetailsService implements UserDetailsService {\r\n\r\n    private final UserRepository userRepository;\r\n\r\n    @Override\r\n    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {\r\n        UserEntity userEntity = userRepository.findByEmail(username)\r\n                .orElseThrow(() -> new UsernameNotFoundException(\"Usuario no encontrado: \" + username));\r\n\r\n        return new org.springframework.security.core.userdetails.User(\r\n                userEntity.getEmail(),\r\n                userEntity.getPassword(),\r\n                mapRolesToAuthorities(userEntity.getUserEnum())\r\n        );\r\n    }\r\n\r\n    private Collection<? extends GrantedAuthority> mapRolesToAuthorities(UserEnum userEnum) {\r\n        return List.of(new SimpleGrantedAuthority(userEnum.name()));\r\n    }\r\n}\r\n\r\n",
              "JwtUtil.java": "package com.Casinop2p.service;\r\n\r\nimport io.jsonwebtoken.Claims;\r\nimport io.jsonwebtoken.Jwts;\r\nimport io.jsonwebtoken.SignatureAlgorithm;\r\nimport org.springframework.security.core.userdetails.UserDetails;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport java.util.Date;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport java.util.function.Function;\r\n\r\n@Service\r\npublic class JwtUtil {\r\n    private final String SECRET_KEY = \"my_secret_key\"; // Cambiar en producci√≥n\r\n\r\n    public String extractUsername(String token) {\r\n        return extractClaim(token, Claims::getSubject);\r\n    }\r\n\r\n    public Date extractExpiration(String token) {\r\n        return extractClaim(token, Claims::getExpiration);\r\n    }\r\n\r\n    public <T> T extractClaim(String token, Function<Claims, T> claimsResolver) {\r\n        final Claims claims = extractAllClaims(token);\r\n        return claimsResolver.apply(claims);\r\n    }\r\n\r\n    private Claims extractAllClaims(String token) {\r\n        return Jwts.parser().setSigningKey(SECRET_KEY).parseClaimsJws(token).getBody();\r\n    }\r\n\r\n    private Boolean isTokenExpired(String token) {\r\n        return extractExpiration(token).before(new Date());\r\n    }\r\n\r\n    public String generateToken(UserDetails userDetails) {\r\n        Map<String, Object> claims = new HashMap<>();\r\n        return createToken(claims, userDetails.getUsername());\r\n    }\r\n\r\n    private String createToken(Map<String, Object> claims, String subject) {\r\n        return Jwts.builder()\r\n                .setClaims(claims)\r\n                .setSubject(subject)\r\n                .setIssuedAt(new Date(System.currentTimeMillis()))\r\n                .setExpiration(new Date(System.currentTimeMillis() + 1000 * 60 * 60 * 10)) // 10 horas\r\n                .signWith(SignatureAlgorithm.HS256, SECRET_KEY)\r\n                .compact();\r\n    }\r\n\r\n    public Boolean validateToken(String token, UserDetails userDetails) {\r\n        final String username = extractUsername(token);\r\n        return (username.equals(userDetails.getUsername()) && !isTokenExpired(token));\r\n    }\r\n}\r\n\r\n",
              "UserService.java": "package com.Casinop2p.service;\r\n\r\n\r\nimport com.Casinop2p.dto.UserDTOReq;\r\nimport com.Casinop2p.dto.UserDTORes;\r\n\r\nimport java.util.List;\r\n\r\npublic interface UserService {\r\n\r\n    public UserDTORes getUser(Long id);\r\n\r\n    UserDTORes createUser(UserDTOReq userDTOReq);\r\n\r\n    // Firma del m√©todo para obtener un usuario por su ID\r\n    UserDTORes getUserById(Long id);\r\n\r\n    // Firma del m√©todo para actualizar un usuario\r\n    UserDTORes updateUser(Long id, UserDTOReq userDTOReq);\r\n\r\n    // Firma del m√©todo para eliminar un usuario por su ID\r\n    void deleteUser(Long id);\r\n\r\n    // Firma del m√©todo para obtener todos los usuarios\r\n    List<UserDTORes> getAllUsers();\r\n\r\n\r\n}\r\n",
              "UserServiceImp.java": "package com.Casinop2p.service;\r\n\r\nimport com.Casinop2p.Mapper.UserMapper;\r\nimport com.Casinop2p.dto.UserDTOReq;\r\nimport com.Casinop2p.dto.UserDTORes;\r\nimport com.Casinop2p.entity.UserEntity;\r\n\r\nimport com.Casinop2p.exceptions.NotFoundException;\r\nimport com.Casinop2p.repository.UserRepository;\r\nimport com.Casinop2p.util.UserEnum;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.modelmapper.ModelMapper;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.security.crypto.password.PasswordEncoder;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\n@Service\r\n@RequiredArgsConstructor\r\npublic class UserServiceImp  implements UserService{\r\n\r\n    @Autowired\r\n    private PasswordEncoder passwordEncoder;\r\n\r\n    private final UserRepository userRepository;\r\n    @Autowired\r\n    private ModelMapper modelMapper;  // Para convertir entre entidades y DTOs\r\n\r\n    @Override\r\n    public UserDTORes getUser(Long id) {\r\n\r\n        return UserMapper.toDTO(userRepository.findById(id).orElseThrow(()->new NotFoundException(\"no se encontro usuario\")));\r\n    }\r\n\r\n\r\n    @Override\r\n    public UserDTORes createUser(UserDTOReq userDTOReq) {\r\n        UserEntity user = modelMapper.map(userDTOReq, UserEntity.class);\r\n\r\n        // Aseg√∫rate de que est√°s codificando la contrase√±a\r\n        user.setPassword(passwordEncoder.encode(user.getPassword()));\r\n\r\n        user = userRepository.save(user);\r\n        return modelMapper.map(user, UserDTORes.class);\r\n    }\r\n\r\n        public UserDTORes getUserById(Long id) {\r\n            UserEntity user = userRepository.findById(id)\r\n                    .orElseThrow(() -> new NotFoundException(\"El usuario con ID: \" + id +\"no fue encontrado\"));\r\n            return modelMapper.map(user, UserDTORes.class);\r\n        }\r\n\r\n        public UserDTORes updateUser(Long id, UserDTOReq userDTOReq) {\r\n            UserEntity existingUser = userRepository.findById(id)\r\n                    .orElseThrow(() -> new NotFoundException(\"El usuario con ID: \" + id +\"no fue encontrado\"));\r\n\r\n            existingUser.setName(userDTOReq.name());\r\n            existingUser.setPassword(userDTOReq.password());\r\n            existingUser.setBalance(userDTOReq.balance());\r\n            existingUser.setEmail(userDTOReq.email());\r\n            existingUser.setUserEnum(UserEnum.valueOf(userDTOReq.userEnum()));\r\n\r\n            existingUser = userRepository.save(existingUser);\r\n            return modelMapper.map(existingUser, UserDTORes.class);\r\n        }\r\n\r\n        public void deleteUser(Long id) {\r\n            UserEntity user = userRepository.findById(id)\r\n                    .orElseThrow(() -> new NotFoundException(\"El usuario con ID: \" + id +\"no fue encontrado\"));\r\n            userRepository.delete(user);\r\n        }\r\n\r\n        public List<UserDTORes> getAllUsers() {\r\n            List<UserEntity> users = userRepository.findAll();\r\n            return users.stream()\r\n                    .map(user -> modelMapper.map(user, UserDTORes.class))\r\n                    .collect(Collectors.toList());\r\n        }\r\n    }\r\n\r\n\r\n"
            },
            "util": {
              "BetEnum.java": "package com.Casinop2p.util;\r\n\r\npublic enum BetEnum {\r\n\r\n    WIN, LOSS, DRAW\r\n}\r\n",
              "JwtAuthenticationFilter.java": "package com.Casinop2p.util;\r\n\r\nimport com.Casinop2p.service.CustomUserDetailsService;\r\nimport com.Casinop2p.service.JwtUtil;\r\nimport jakarta.servlet.FilterChain;\r\nimport jakarta.servlet.ServletException;\r\nimport jakarta.servlet.http.HttpServletRequest;\r\nimport jakarta.servlet.http.HttpServletResponse;\r\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\r\nimport org.springframework.security.core.context.SecurityContextHolder;\r\nimport org.springframework.security.core.userdetails.UserDetails;\r\nimport org.springframework.security.web.authentication.WebAuthenticationDetailsSource;\r\nimport org.springframework.stereotype.Component;\r\nimport org.springframework.web.filter.OncePerRequestFilter;\r\n\r\nimport java.io.IOException;\r\n\r\n@Component\r\npublic class JwtAuthenticationFilter extends OncePerRequestFilter {\r\n\r\n    private final CustomUserDetailsService userDetailsService;\r\n    private final JwtUtil jwtUtil;\r\n\r\n    public JwtAuthenticationFilter(CustomUserDetailsService userDetailsService, JwtUtil jwtUtil) {\r\n        this.userDetailsService = userDetailsService;\r\n        this.jwtUtil = jwtUtil;\r\n    }\r\n\r\n    @Override\r\n    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)\r\n            throws ServletException, IOException {\r\n\r\n        String authHeader = request.getHeader(\"Authorization\");\r\n        String jwt = null;\r\n        String username = null;\r\n\r\n        if (authHeader != null && authHeader.startsWith(\"Bearer \")) {\r\n            jwt = authHeader.substring(7);\r\n            username = jwtUtil.extractUsername(jwt);\r\n        }\r\n\r\n        if (username != null && SecurityContextHolder.getContext().getAuthentication() == null) {\r\n            UserDetails userDetails = this.userDetailsService.loadUserByUsername(username);\r\n\r\n            if (jwtUtil.validateToken(jwt, userDetails)) {\r\n                UsernamePasswordAuthenticationToken authToken =\r\n                        new UsernamePasswordAuthenticationToken(userDetails, null, userDetails.getAuthorities());\r\n                authToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));\r\n                SecurityContextHolder.getContext().setAuthentication(authToken);\r\n            }\r\n        }\r\n\r\n        filterChain.doFilter(request, response);\r\n    }\r\n}\r\n\r\n",
              "RoomEnum.java": "package com.Casinop2p.util;\r\n\r\npublic enum RoomEnum {\r\n\r\n    SPORT, ELECTIONS, CASINO, CUSTOM\r\n}\r\n",
              "SportEnum.java": "package com.Casinop2p.util;\r\n\r\npublic enum SportEnum {\r\n\r\n    COINFLIP, FUTBOL, BASKETBALL, BOXING, MMA\r\n}\r\n",
              "UserEnum.java": "package com.Casinop2p.util;\r\n\r\npublic enum UserEnum {\r\n\r\n    ADMIN,USER,INVITED\r\n}\r\n"
            }
          }
        }
      },
      "resources": {
        "application.properties": "spring.application.name=Casinop2p\r\nserver.servlet.context-path=/api/v1\r\nspring.config.import=optional:file:.env[.properties]\r\nspring.datasource.url=${SPRING_DATASOURCE_URL}\r\nspring.datasource.username=${SPRING_DATASOURCE_USERNAME}\r\nspring.datasource.password=${SPRING_DATASOURCE_PASSWORD}\r\nspring.jpa.hibernate.ddl-auto=update\r\n\r\n\r\n#spring.datasource.url=jdbc:mysql://localhost:3306/cursojava?serverTimezone=America/Argentina/Buenos_Aires\r\n#spring.datasource.username=root\r\n#spring.datasource.password=1234\r\n#spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver\r\n\r\n#spring.jpa.hibernate.ddl-auto=update\r\n#spring.jpa.show-sql=true\r\n#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect"
      }
    },
    "test": {
      "java": {
        "com": {
          "Casinop2p": {
            "Casinop2pApplicationTests.java": "package com.Casinop2p;\r\n\r\nimport org.junit.jupiter.api.Test;\r\nimport org.springframework.boot.test.context.SpringBootTest;\r\n\r\n@SpringBootTest\r\nclass Casinop2pApplicationTests {\r\n\r\n\t@Test\r\n\tvoid contextLoads() {\r\n\t}\r\n\r\n}\r\n"
          }
        }
      }
    }
  }
}